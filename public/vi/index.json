[
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/",
	"title": "Quản lý Registry Container với ECR và Chính sách bảo mật",
	"tags": [],
	"description": "",
	"content": "Quản lý Registry Container với ECR và Chính sách bảo mật Tổng quan Trong workshop này, bạn sẽ triển khai một hệ thống quản lý registry container toàn diện sử dụng Amazon Elastic Container Registry (ECR). Nội dung tập trung vào việc thiết kế một quy trình quản lý container an toàn, hiệu quả và chuyên nghiệp, được tích hợp hoàn chỉnh với:\nCác chính sách bảo mật (IAM) Quét lỗ hổng bảo mật (Amazon Inspector) Kiểm soát truy cập chi tiết Tự động hóa vòng đời và triển khai CI/CD Giám sát và cảnh báo (CloudWatch \u0026amp; SNS) Xác thực tuân thủ và tối ưu hóa chi phí Bạn sẽ học cách thiết kế hệ thống theo phương pháp DevSecOps, trong đó các image container được quét trước khi triển khai, quyền truy cập được kiểm soát chặt chẽ và các tài nguyên cũ được tự động dọn dẹp để giảm chi phí.\nKhi kết thúc workshop này, bạn sẽ có thể: Áp dụng các chính sách bảo mật bằng IAM, trình bày cách ECR tương tác với các dịch vụ như CodeBuild, ECS và Lambda Tích hợp Amazon Inspector để tự động quét lỗ hổng bảo mật của các image container ngay sau khi đẩy image Triển khai kiểm soát truy cập chi tiết, đảm bảo người dùng và dịch vụ chỉ có các quyền cần thiết Cấu hình chính sách vòng đời ECR để tự động dọn dẹp các image không sử dụng hoặc không gắn thẻ và tối ưu hóa chi phí lưu trữ Thiết kế một pipeline CI/CD tự động kích hoạt quét bảo mật khi các image mới được đẩy lên Thiết lập giám sát và cảnh báo để thông báo cho bạn về các mối đe dọa bảo mật tiềm ẩn hoặc các hoạt động đáng ngờ Xây dựng một pipeline DevSecOps sẵn sàng cho sản xuất để quản lý container một cách an toàn và hiệu quả trên AWS Nội dung Workshop Giới thiệu Điều kiện tiên quyết Cấu hình IAM CI/CD với GitHub Actions Bảo mật ECR \u0026amp; Quản lý Vòng đời Giám sát \u0026amp; Cảnh báo Dọn dẹp tài nguyên Hãy bắt đầu xây dựng một registry container an toàn, tối ưu hóa và tự động trên AWS!\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/4-ci-cd-with-github-actions/4.1-prepare-github-repo/",
	"title": "Chuẩn bị Github Repository",
	"tags": [],
	"description": "",
	"content": "Để thiết lập luồng CI/CD với GitHub Actions, trước tiên chúng ta cần chuẩn bị repository chứa mã nguồn ứng dụng mẫu và cấu hình các biến môi trường bảo mật (secrets) trong GitHub.\nMục tiêu của phần này Clone repository mã nguồn ứng dụng về máy tính cục bộ. Tạo một GitHub Repository mới trên tài khoản cá nhân. Đẩy mã nguồn đã clone lên GitHub Repository mới tạo. Cấu hình GitHub Repository Secrets để lưu trữ thông tin xác thực AWS và URI của ECR. Clone Repository về máy cục bộ Bạn cần clone repository chứa mã nguồn ứng dụng mẫu về máy tính cục bộ để có thể chỉnh sửa và đẩy (push) code lên repository của riêng bạn.\nMở Terminal / Command Prompt: Mở cửa sổ dòng lệnh trên máy tính của bạn.\nClone Repository gốc: Tải mã nguồn từ repository mẫu về máy tính của bạn.\ngit clone https://github.com/HoangfLong/aws-container-security-workshop.git Tạo Repository mới trên GitHub cá nhân và đẩy mã nguồn lên Sau khi đã clone mã nguồn về máy, bạn cần tạo một repository mới trên tài khoản GitHub của mình và đẩy mã nguồn này lên đó. Đây sẽ là repository mà GitHub Actions của bạn sẽ theo dõi.\nCác bước thực hiện:\nTạo Repository mới trên GitHub:\nĐăng nhập vào tài khoản GitHub của bạn. Nhấp vào dấu + ở góc trên bên phải, sau đó chọn New repository. Đặt tên cho repository của bạn (ví dụ: aws-container-security-workshop-my-repo), chọn loại Public hoặc Private tùy ý, và KHÔNG đánh dấu chọn \u0026ldquo;Add a README file\u0026rdquo; hay các tùy chọn khởi tạo khác. Cuối cùng, nhấp vào Create repository. Liên kết và đẩy mã nguồn lên Repository mới:\nQuay lại Terminal/Command Prompt (đảm bảo bạn đang ở trong thư mục dự án đã clone). Xóa liên kết remote cũ (nếu có): git remote remove origin Thêm liên kết đến repository mới của bạn trên GitHub: git remote add origin [https://github.com/YOUR_GITHUB_USERNAME/YOUR_NEW_REPOSITORY_NAME.git](https://github.com/YOUR_GITHUB_USERNAME/YOUR_NEW_REPOSITORY_NAME.git) (Thay YOUR_GITHUB_USERNAME và YOUR_NEW_REPOSITORY_NAME bằng thông tin của bạn). Đặt lại nhánh chính thành main (nếu cần): git branch -M main Đẩy mã nguồn lên repository mới của bạn: git push -u origin main (Bạn có thể được yêu cầu đăng nhập bằng tên người dùng và Mã thông báo truy cập cá nhân (Personal Access Token) của GitHub). Cấu hình GitHub Repository Secrets Để GitHub Actions có thể tương tác an toàn với tài khoản AWS và Amazon ECR của bạn, chúng ta cần lưu trữ các thông tin nhạy cảm (như Access Key, Secret Key của IAM User, Region AWS và URI của ECR) dưới dạng GitHub Repository Secrets. Điều này đảm bảo các thông tin này không bị lộ ra trong mã nguồn hoặc nhật ký workflow.\nCác bước thực hiện:\nTruy cập Repository Settings: Từ trang repository đã đẩy code lên của bạn trên GitHub, nhấp vào tab Settings.\nChọn Secrets and Variables: Trong thanh điều hướng bên trái, cuộn xuống và chọn Secrets and variables, sau đó chọn Actions.\nThêm các Secrets cần thiết: Nhấp vào nút New repository secret để thêm từng secret một:\nAWS_ACCESS_KEY_ID: Dán giá trị Access Key ID đã tạo trong AWS (từ Mục 3.1).\nAWS_REGION: Dán giá trị Region AWS của bạn (ví dụ: ap-southeast-1 hoặc us-east-1). (Chọn Region mà bạn đã tạo IAM User và ECR Repository).\nAWS_SECRET_ACCESS_KEY: Dán giá trị Secret Access Key đã tạo trong AWS (từ Mục 3.1).\nECR_REPOSITORY_URI: Dán URI của ECR Repository fcj-workshop-app của bạn (từ Mục 3.1).\nSau khi thêm, bạn sẽ thấy bốn secrets này trong danh sách. Chúng sẽ được GitHub Actions sử dụng một cách an toàn mà không bị lộ ra ngoài.\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/6-monitoring-alerts/6.1-cloudtrail-cloudwatch/",
	"title": "Giám sát ECR với AWS CloudTrail và Amazon CloudWatch",
	"tags": [],
	"description": "",
	"content": "Để có cái nhìn toàn diện về các hoạt động diễn ra trong Amazon ECR và đảm bảo tuân thủ các chính sách bảo mật, việc tận dụng AWS CloudTrail và Amazon CloudWatch là rất cần thiết. Hai dịch vụ này làm việc cùng nhau để cung cấp khả năng giám sát mạnh mẽ, giúp bạn theo dõi ai đã làm gì, khi nào và ở đâu trong môi trường registry của mình.\nTrong phần này, bạn sẽ học cách:\nĐảm bảo CloudTrail ghi lại hoạt động ECR và gửi nhật ký đến CloudWatch Logs. Theo dõi các cuộc gọi API liên quan đến ECR. Phân tích nhật ký và giám sát chỉ số hiệu suất của ECR. Để có cái nhìn toàn diện về các hoạt động diễn ra trong Amazon ECR và đảm bảo tuân thủ các chính sách bảo mật, việc tận dụng AWS CloudTrail và Amazon CloudWatch là rất cần thiết. Hai dịch vụ này làm việc cùng nhau để cung cấp khả năng giám sát mạnh mẽ, giúp bạn theo dõi ai đã làm gì, khi nào và ở đâu trong môi trường registry của mình.\nTrong phần này, bạn sẽ học cách:\nĐảm bảo CloudTrail ghi lại hoạt động ECR và gửi nhật ký đến CloudWatch Logs. Theo dõi các cuộc gọi API liên quan đến ECR. Phân tích nhật ký và giám sát chỉ số hiệu suất của ECR. Thiết lập CloudTrail để giám sát ECR Đăng nhập và truy cập CloudTrail:\nĐăng nhập vào AWS Management Console. Trong thanh tìm kiếm, gõ CloudTrail và chọn dịch vụ CloudTrail từ kết quả. Kiểm tra trạng thái Trail và quyết định hành động:\nTrong bảng điều khiển CloudTrail, chọn \u0026ldquo;Trails\u0026rdquo; từ menu bên trái. Kiểm tra xem bạn đã có Trail nào đang hoạt động và gửi nhật ký đến CloudWatch Logs chưa. Nếu cần tạo Trail mới hoặc cấu hình Trail hiện có: Tiếp tục với Bước 3. Nếu Trail đã được cấu hình đúng: Bạn có thể bỏ qua các bước cấu hình Trail và chuyển trực tiếp đến Bước 9. Tạo hoặc chỉnh sửa Trail để gửi nhật ký đến CloudWatch Logs:\nNếu tạo Trail mới: Nhấp vào \u0026ldquo;Create trail\u0026rdquo;. Nếu chỉnh sửa Trail hiện có: Nhấp vào tên Trail đó, sau đó tìm phần \u0026ldquo;CloudWatch Logs\u0026rdquo; và nhấp \u0026ldquo;Edit\u0026rdquo;. Cấu hình chi tiết Trail (nếu tạo mới):\nTrail name: Đặt tên cho Trail (ví dụ: ecr-monitor-trail). Storage location: Chọn \u0026ldquo;Create new S3 bucket\u0026rdquo; và đặt tên (hoặc dùng bucket hiện có). CloudWatch Logs: Chọn \u0026ldquo;Enabled\u0026rdquo;. Chọn \u0026ldquo;New\u0026rdquo; để tạo Log group mới (ví dụ: /aws/cloudtrail/ecr-logs) hoặc chọn Log group hiện có. (Các tùy chọn khác giữ mặc định hoặc bỏ qua). Cấu hình chi tiết Trail (tiếp theo):\nNhấp \u0026ldquo;Next\u0026rdquo;. Trong phần \u0026ldquo;Choose log events\u0026rdquo;, đảm bảo \u0026ldquo;Management events\u0026rdquo; được chọn. Hoàn tất tạo Trail:\nNhấp \u0026ldquo;Next\u0026rdquo;. Nhấp \u0026ldquo;Create trail\u0026rdquo; (nếu tạo mới) hoặc \u0026ldquo;Save changes\u0026rdquo; (nếu chỉnh sửa). Xem và phân tích nhật ký ECR Truy cập Lịch sử Sự kiện CloudTrail:\nTrong bảng điều khiển CloudTrail, chọn \u0026ldquo;Event history\u0026rdquo; từ menu bên trái. Lọc sự kiện theo ECR:\nNhấp vào bộ lọc \u0026ldquo;Attribute\u0026rdquo;, chọn \u0026ldquo;Event source\u0026rdquo;. Trong trường bên cạnh, gõ ecr.amazonaws.com và nhấn Enter. Truy cập Log groups trong CloudWatch:\nTrong thanh tìm kiếm AWS Console, gõ CloudWatch và chọn dịch vụ CloudWatch. Trong bảng điều khiển CloudWatch, chọn \u0026ldquo;Log groups\u0026rdquo; dưới phần \u0026ldquo;Logs\u0026rdquo;. Tìm Log group của CloudTrail:\nTrong danh sách Log group, tìm Log group mà CloudTrail đang gửi nhật ký tới (đã cấu hình ở Bước 4). Nhấp vào tên của Log group đó để xem các luồng nhật ký. Giám sát chỉ số và tạo Dashboard Giám sát chỉ số ECR trong CloudWatch Metrics:\nTrong bảng điều khiển CloudWatch, chọn \u0026ldquo;Metrics\u0026rdquo; từ menu bên trái. Trong phần \u0026ldquo;All metrics\u0026rdquo;, chọn namespace \u0026ldquo;ECR\u0026rdquo; hoặc \u0026ldquo;AWS/ECR\u0026rdquo;. Chọn các chỉ số ECR bạn muốn xem (ví dụ: RepositorySize, ImageCount). Tạo Dashboard tùy chỉnh cho ECR (Tùy chọn):\nTrong bảng điều khiển CloudWatch, chọn \u0026ldquo;Dashboards\u0026rdquo;. Nhấp \u0026ldquo;Create dashboard\u0026rdquo;, đặt tên (ví dụ: ECR-Operations-Dashboard), và nhấp \u0026ldquo;Create dashboard\u0026rdquo;. Thêm các widget.\nChọn metic cần thêm Chọn ECR Chọn ECR repository của bạn Chọn create widget Bằng cách thiết lập AWS CloudTrail để ghi lại các sự kiện ECR và gửi chúng đến Amazon CloudWatch Logs, bạn đã tạo ra một hệ thống giám sát mạnh mẽ. Giờ đây, bạn có thể dễ dàng theo dõi các hoạt động API trong ECR, phân tích nhật ký chi tiết bằng CloudWatch Logs Insights và trực quan hóa các chỉ số hiệu suất quan trọng của ECR thông qua các CloudWatch Dashboard tùy chỉnh. Điều này giúp bạn không chỉ nắm bắt được ai đã làm gì và khi nào trong các kho chứa image của mình, mà còn chủ động theo dõi tình trạng và hiệu suất của ECR, từ đó tăng cường bảo mật và hiệu quả hoạt động\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Trong workshop này, chúng ta sẽ xây dựng một giải pháp toàn diện để quản lý vòng đời và bảo mật cho các container image của bạn bằng cách tận dụng sức mạnh của Amazon Elastic Container Registry (ECR) cùng với các dịch vụ AWS liên quan. Bạn sẽ được hướng dẫn qua một quy trình DevSecOps, từ việc thiết lập ban đầu cho đến tự động hóa, bảo mật và giám sát.\nKiến trúc tổng quan Kiến trúc trên minh họa luồng hoạt động chính trong workshop này:\nPhát triển và Tích hợp liên tục (CI/CD):\nDeveloper bắt đầu bằng việc yêu cầu quyền truy cập thông qua IAM (Identity and Access Management). Các thay đổi mã nguồn được quản lý trong GitHub. Khi có một thẻ (tag) mới được tạo hoặc code được đẩy lên, GitHub Actions sẽ được kích hoạt. GitHub Actions đóng vai trò là công cụ CI/CD chính của chúng ta. Nó sẽ thực hiện các bước: \u0026ldquo;Build Code to Image\u0026rdquo; (xây dựng Docker image từ mã nguồn) và sau đó \u0026ldquo;Push to ECR\u0026rdquo; (đẩy image đã xây dựng lên Amazon Elastic Container Registry). Image sau khi được đẩy thành công sẽ \u0026ldquo;Image Ready for Deployment\u0026rdquo; (sẵn sàng để triển khai). Quản lý Registry và Bảo mật trong AWS Cloud:\nAmazon ECR là kho lưu trữ trung tâm cho các container image của bạn. Tại đây, ECR Repository Policies sẽ quản lý các quy tắc truy cập chi tiết và ECR Lifecycle Policy sẽ tự động quản lý vòng đời của các image, giúp dọn dẹp các phiên bản cũ hoặc không cần thiết. Khi một image mới được đẩy lên ECR, hoạt động này sẽ \u0026ldquo;image push triggers scan/report findings\u0026rdquo; (kích hoạt quét và báo cáo kết quả) bởi Amazon Inspector. Amazon Inspector sẽ tự động quét image để phát hiện các lỗ hổng bảo mật đã biết. Giám sát:\nAWS CloudTrail tự động ghi lại \u0026ldquo;API Calls Logs\u0026rdquo; (nhật ký cuộc gọi API) từ ECR và các dịch vụ AWS khác. Những nhật ký này được gửi tới Amazon CloudWatch để lưu trữ và phân tích \u0026ldquo;metrics/logs\u0026rdquo;. CloudWatch cũng đóng vai trò trong việc giám sát tổng thể và có thể kích hoạt các cảnh báo dựa trên các chỉ số. Amazon Inspector phát hiện các lỗ hổng bảo mật (vulnerabilities) trong container image bạn lưu trữ trong Amazon ECR. Dọn dẹp Tài nguyên: Cuối cùng, workshop cũng sẽ hướng dẫn bạn cách dọn dẹp tất cả các tài nguyên AWS đã tạo để tránh phát sinh chi phí không mong muốn.\nWorkshop này sẽ cung cấp cho bạn kiến thức thực tế và kỹ năng cần thiết để xây dựng một quy trình quản lý container image hiện đại, bảo mật và hiệu quả chi phí trong môi trường AWS.\nCác dịch vụ AWS chính được sử dụng Trong workshop này, chúng ta sẽ tương tác và cấu hình một số dịch vụ AWS quan trọng để xây dựng một hệ thống quản lý container image toàn diện. Dưới đây là giới thiệu cơ bản về từng dịch vụ:\nAmazon Elastic Container Registry (ECR) Amazon ECR là một dịch vụ đăng ký Docker container được quản lý hoàn toàn, an toàn, có khả năng mở rộng và đáng tin cậy. ECR cho phép các nhà phát triển dễ dàng lưu trữ, quản lý, chia sẻ và triển khai các image Docker của họ. Dịch vụ này tích hợp chặt chẽ với Amazon Elastic Container Service (ECS), Amazon Elastic Kubernetes Service (EKS) và AWS Lambda, cũng như các công cụ CI/CD của AWS và bên thứ ba.\nVới Amazon ECR, bạn không cần phải vận hành cơ sở hạ tầng đăng ký container của riêng mình hoặc lo lắng về việc mở rộng, bảo mật và tính khả dụng của nó. ECR cung cấp:\nBảo mật cao: Image được mã hóa khi lưu trữ và trong quá trình truyền. Tích hợp IAM để kiểm soát truy cập chi tiết. Khả năng mở rộng: Tự động mở rộng để đáp ứng nhu cầu lưu trữ image của bạn. Hiệu suất cao: Truy xuất image nhanh chóng cho các triển khai container của bạn. AWS Identity and Access Management (IAM) AWS Identity and Access Management (IAM) là một dịch vụ web giúp bạn kiểm soát an toàn quyền truy cập vào các tài nguyên AWS của mình. Với IAM, bạn có thể quản lý ai được xác thực (đăng nhập) và được ủy quyền (có quyền) để sử dụng tài nguyên. Trong workshop này, IAM đóng vai trò nền tảng cho bảo mật bằng cách:\nQuản lý người dùng: Tạo và quản lý người dùng AWS để truy cập console hoặc qua CLI. Quản lý vai trò (Roles): Cho phép các dịch vụ AWS hoặc các bên thứ ba (như GitHub Actions) đảm nhận một vai trò với các quyền tạm thời để thực hiện các tác vụ. Quản lý chính sách (Policies): Định nghĩa các quyền cụ thể (cho phép hoặc từ chối) mà người dùng hoặc vai trò có thể thực hiện trên các tài nguyên AWS của bạn, đảm bảo nguyên tắc \u0026ldquo;ít đặc quyền nhất\u0026rdquo;. GitHub Actions GitHub Actions là một nền tảng tích hợp liên tục (CI) và phân phối liên tục (CD) được tích hợp trực tiếp vào GitHub. Nó cho phép bạn tự động hóa các quy trình làm việc phát triển phần mềm của mình trực tiếp từ repository GitHub. Trong workshop này, GitHub Actions được sử dụng để:\nTự động hóa Build: Tự động xây dựng Docker image khi có thay đổi code. Tự động hóa Push: Đẩy Docker image đã xây dựng lên ECR. Tích hợp: Kết nối an toàn với AWS thông qua IAM Roles và OpenID Connect để thực hiện các hành động trên ECR. Amazon Inspector Amazon Inspector là một dịch vụ quản lý lỗ hổng bảo mật tự động giúp bạn khám phá và quét liên tục các khối lượng công việc AWS để tìm kiếm các lỗ hổng. Khi tích hợp với ECR, Amazon Inspector có khả năng:\nQuét image tự động: Tự động quét các container image mới khi chúng được đẩy lên ECR. Phát hiện lỗ hổng: Xác định các lỗ hổng bảo mật đã biết (CVE - Common Vulnerabilities and Exposures) trong hệ điều hành, các gói ứng dụng và phụ thuộc của image. Báo cáo chi tiết: Cung cấp thông tin chi tiết về các lỗ hổng được tìm thấy, mức độ nghiêm trọng và hướng dẫn khắc phục. AWS CloudTrail AWS CloudTrail là một dịch vụ cho phép bạn giám sát và ghi lại các hoạt động của người dùng và các cuộc gọi API trên các dịch vụ AWS. Nó cung cấp bản ghi lịch sử về các sự kiện trong tài khoản AWS của bạn. CloudTrail rất quan trọng cho:\nKiểm toán bảo mật: Cung cấp dấu vết kiểm toán chi tiết về mọi tương tác với ECR và các dịch vụ khác, giúp theo dõi ai đã làm gì, khi nào và ở đâu. Phân tích tuân thủ: Hỗ trợ các yêu cầu tuân thủ bằng cách cung cấp bằng chứng về hoạt động tài khoản. Khắc phục sự cố: Giúp chẩn đoán và khắc phục sự cố bằng cách xem xét chuỗi các sự kiện đã xảy ra. Amazon CloudWatch Amazon CloudWatch là một dịch vụ giám sát và quản lý cho phép bạn thu thập và truy cập các chỉ số (metrics), nhật ký (logs) và sự kiện (events) từ các ứng dụng, tài nguyên và dịch vụ AWS của bạn. Trong workshop, CloudWatch được sử dụng để:\nThu thập chỉ số: Tự động thu thập các chỉ số về hiệu suất và hoạt động của ECR (ví dụ: dung lượng repository, số lần push/pull image). Giám sát nhật ký: Lưu trữ và phân tích nhật ký từ các dịch vụ khác (ví dụ: nhật ký API từ CloudTrail). Tạo cảnh báo: Thiết lập cảnh báo dựa trên các ngưỡng chỉ số hoặc các mẫu trong nhật ký để chủ động thông báo về các vấn đề tiềm ẩn. "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/5-ecr-security-lifecycle/5.1-repository-policy/",
	"title": "Repository Access Policy",
	"tags": [],
	"description": "",
	"content": "Trong AWS ECR, Repository Access Policy (Chính sách truy cập Repository) là một tính năng mạnh mẽ cho phép bạn kiểm soát chi tiết ai hoặc dịch vụ nào có thể tương tác với các Docker image trong repository của bạn. Không giống như các chính sách IAM dựa trên danh tính (Identity-based policies), Repository Policy là một chính sách dựa trên tài nguyên (Resource-based policy) được gắn trực tiếp vào từng ECR repository cụ thể.\nĐiều này cho phép bạn định nghĩa các quyền truy cập (ví dụ: ai có thể kéo - pull, đẩy - push image) ngay tại cấp độ của repository, bổ sung thêm một lớp bảo mật và kiểm soát truy cập tinh vi hơn.\nMục tiêu của phần này Hiểu vai trò và tầm quan trọng của ECR Repository Policy. Phân biệt rõ ràng giữa IAM Identity-based policies và ECR Repository policies. Cấu hình một Repository Policy để giới hạn hoặc cấp quyền truy cập. Áp dụng chính sách để tăng cường bảo mật cho các Docker image của bạn. Khái niệm Repository Policy và sự khác biệt với IAM Policies Để hiểu rõ hơn về Repository Policy, điều quan trọng là phải phân biệt nó với IAM Identity-based policies:\nIAM Identity-based Policies (Chính sách dựa trên danh tính):\nĐược gắn vào một IAM Principal (người dùng, nhóm hoặc vai trò IAM). Xác định những hành động nào mà Principal đó được phép thực hiện trên những tài nguyên nào. Ví dụ: Một chính sách IAM có thể cho phép một người dùng nhất định thực hiện hành động ecr:PutImage trên tất cả các ECR repository trong tài khoản. ECR Repository Policies (Chính sách dựa trên tài nguyên):\nĐược gắn trực tiếp vào một tài nguyên cụ thể (trong trường hợp này là một ECR repository). Xác định Principal nào được phép thực hiện những hành động nào trên chính tài nguyên đó. Ví dụ: Một chính sách Repository có thể cho phép một IAM role từ một tài khoản AWS khác truy cập vào repository này. Nguyên tắc đánh giá quyền (Logic \u0026ldquo;AND\u0026rdquo;):\nĐể một Principal có thể thực hiện một hành động trên một ECR repository, hành động đó phải được cả hai chính sách cho phép:\nChính sách IAM (Identity-based policy) của Principal đó phải cho phép hành động. Chính sách ECR Repository (Resource-based policy) của repository phải cho phép hành động đối với Principal đó. Nếu một trong hai chính sách từ chối rõ ràng (Effect: Deny) hành động, thì hành động đó sẽ bị từ chối, bất kể chính sách còn lại có cho phép hay không.\nSự kết hợp này mang lại sự linh hoạt và kiểm soát chi tiết hơn, đặc biệt hữu ích trong các trường hợp như:\nCấp quyền truy cập tài khoản chéo (cross-account access). Kiểm soát quyền truy cập cho một số lượng lớn Principal dựa trên các thuộc tính của tài nguyên. Để tìm hiểu sâu hơn về sự khác biệt giữa các loại chính sách trong AWS, bạn có thể tham khảo tài liệu chính thức của AWS:\nPrivate repository policies in Amazon ECR - Repository policies vs IAM policies Identity-based policies and resource-based policies - AWS IAM User Guide Cấu hình Repository Policy Chúng ta sẽ cấu hình một Repository Policy cho repository fcj-workshop-app để minh họa cách kiểm soát quyền truy cập. Ví dụ dưới đây sẽ cho phép IAM user fcj-ecr-ci-cd-user (mà chúng ta đã tạo) có quyền đẩy và kéo image từ repository này.\nTruy cập dịch vụ ECR:\nTrong thanh tìm kiếm, gõ \u0026ldquo;ECR\u0026rdquo; và chọn Elastic Container Registry. Chọn Repository:\nTrong bảng điều khiển ECR, nhấp vào Repositories ở thanh điều hướng bên trái. Tìm và nhấp vào repository có tên fcj-workshop-app của bạn. Chỉnh sửa Repository Policy:\nTrong trang chi tiết của repository fcj-workshop-app, nhấp vào tab Permissions. Nhấp vào nút Edit repository policy. Dán chính sách JSON đã điều chỉnh:\nMột trình soạn thảo JSON sẽ hiện ra. Xóa bất kỳ nội dung nào có sẵn và dán chính sách JSON an toàn sau vào đó: { \u0026#34;Version\u0026#34;: \u0026#34;2008-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowPushPullFromCICDUser\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::\u0026lt;YOUR_AWS_ACCOUNT_ID\u0026gt;:user/fcj-ecr-ci-cd-user\u0026#34; }, \u0026#34;Action\u0026#34;: [ \u0026#34;ecr:GetDownloadUrlForLayer\u0026#34;, \u0026#34;ecr:BatchGetImage\u0026#34;, \u0026#34;ecr:BatchCheckLayerAvailability\u0026#34;, \u0026#34;ecr:PutImage\u0026#34;, \u0026#34;ecr:InitiateLayerUpload\u0026#34;, \u0026#34;ecr:UploadLayerPart\u0026#34;, \u0026#34;ecr:CompleteLayerUpload\u0026#34; ] } ] } Thay thế \u0026lt;YOUR_AWS_ACCOUNT_ID\u0026gt; bằng AWS Account ID của bạn. Bạn có thể tìm thấy AWS Account ID của mình bằng cách nhấp vào tên tài khoản ở góc trên bên phải của AWS Management Console.\nLưu chính sách và kết quả: Giải thích Repository Policy Sid: \u0026quot;AllowPushPullFromCICDUser\u0026quot;\nCho phép người dùng IAM fcj-ecr-ci-cd-user thực hiện các hành động cần thiết để kéo (pull) và đẩy (push) Docker image: ecr:GetDownloadUrlForLayer: Lấy URL để tải xuống lớp (layer) của image. ecr:BatchGetImage: Lấy siêu dữ liệu và cấu hình của nhiều image. ecr:BatchCheckLayerAvailability: Kiểm tra xem các lớp của image có sẵn trong repository không. ecr:PutImage: Đẩy một image manifest lên repository. ecr:InitiateLayerUpload: Bắt đầu quá trình tải lên một lớp image. ecr:UploadLayerPart: Tải lên một phần của lớp image. ecr:CompleteLayerUpload: Hoàn thành quá trình tải lên lớp image. Bạn đã cấu hình thành công Repository Access Policy cho ECR repository của mình một cách an toàn. Chính sách này sẽ giúp tăng cường bảo mật bằng cách kiểm soát chặt chẽ hơn quyền truy cập vào các Docker image của bạn.\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/3-iam-configuration/3.1-set-up-iam/",
	"title": "Thiết lập IAM và Policies",
	"tags": [],
	"description": "",
	"content": "Để đảm bảo quy trình CI/CD của chúng ta có thể tương tác an toàn với Amazon ECR, chúng ta cần cấu hình các quyền truy cập phù hợp trong AWS IAM. Bước này bao gồm việc tạo một ECR Repository nếu chưa có, sau đó tạo một IAM User và gán các chính sách (policies) cần thiết.\nMục tiêu của phần này Tạo ECR Repository fcj-workshop-app nếu chưa có. Lấy thông tin URI của ECR Repository. Tạo một IAM User với quyền truy cập ECR. Gán các chính sách IAM cần thiết cho IAM User. Tạo và Lấy URI của ECR Repository Chúng ta cần có một ECR Repository để lưu trữ các container image. Nếu bạn chưa tạo nó ở phần \u0026ldquo;Sự chuẩn bị\u0026rdquo;, hãy thực hiện các bước sau. Sau đó, chúng ta sẽ lấy URI của repository này.\nĐăng nhập vào AWS Console: Truy cập https://aws.amazon.com/console/ và đăng nhập.\nChuyển đến dịch vụ ECR: Trong thanh tìm kiếm, gõ \u0026ldquo;ECR\u0026rdquo; và chọn Elastic Container Registry.\nKiểm tra và Tạo Repository:\nTrong bảng điều khiển ECR, chọn Repositories ở thanh điều hướng bên trái. Nếu bạn CHƯA CÓ repository tên fcj-workshop-app, hãy làm theo các bước sau để tạo: Nhấp vào nút Create repository. Đối với Visibility settings, chọn Private. Trong phần Repository name, nhập fcj-workshop-app. Nhấp vào nút Create repository ở cuối trang. Nếu bạn ĐÃ CÓ repository fcj-workshop-app từ phần chuẩn bị, hãy chuyển sang bước tiếp theo. Chọn Repository của bạn và Sao chép URI:\nTừ danh sách các repository, tìm và nhấp vào tên repository fcj-workshop-app. Trên trang chi tiết của repository, bạn sẽ thấy URI của repository. Hãy sao chép URI này. Nó sẽ có dạng tương tự như: 123456789012.dkr.ecr.ap-southeast-1.amazonaws.com/fcj-workshop-app (trong đó 123456789012 là ID tài khoản AWS của bạn và ap-southeast-1 là Region). Hãy giữ lại URI này. Chúng ta sẽ cần sử dụng nó trong các bước cấu hình GitHub Actions sau này để chỉ định repository mà image sẽ được đẩy tới.\nTạo IAM Policy cho quyền truy cập ECR Thay vì sử dụng chính sách có sẵn, chúng ta sẽ tạo một IAM Policy tùy chỉnh thông qua giao diện console để kiểm soát chi tiết hơn các quyền mà người dùng CI/CD sẽ có trên ECR.\nChuyển đến dịch vụ IAM: Trong thanh tìm kiếm của AWS Console, gõ \u0026ldquo;IAM\u0026rdquo; và chọn IAM.\nTạo Policy mới:\nTrong bảng điều khiển IAM, chọn Policies ở thanh điều hướng bên trái. Nhấp vào nút Create policy. Chọn dịch vụ và hành động:\nTrên trang Specify permissions, chọn tab Visual editor. Đối với Service, tìm và chọn Elastic Container Registry. Trong phần Actions allowed, mở rộng Write và chọn các hành động sau: CompleteLayerUpload InitiateLayerUpload PutImage UploadLayerPart Mở rộng Read và chọn các hành động sau: BatchCheckLayerAvailability BatchGetImage DescribeImages GetDownloadUrlForLayer Trong phần Access level bổ sung, tìm và chọn hành động GetAuthorizationToken. Trong phần Resources, chọn Specific. Đối với repository, nhấp vào Add ARN. Nhập các thông tin sau: Region: Chọn Region AWS của bạn (ví dụ: ap-southeast-1). Account ID: Nhập ID tài khoản AWS của bạn. Repository name: Nhập fcj-workshop-app. Nhấp vào Add ARN. Đối với tài nguyên GetAuthorizationToken (nếu có tùy chọn này riêng biệt), hãy để là Any hoặc thêm một dòng riêng cho hành động này với Resource: * nếu cần. (Thường thì GetAuthorizationToken không giới hạn theo resource repository cụ thể mà theo account/region). Các quyền ecr:* được chọn cho phép user thực hiện các thao tác đẩy (push) và kéo (pull) image. ecr:GetAuthorizationToken: Cho phép user lấy mã thông báo xác thực để đăng nhập Docker vào ECR. Resource: Chúng ta chỉ định chính sách này chỉ áp dụng cho repository fcj-workshop-app của bạn, tuân thủ nguyên tắc ít đặc quyền nhất.\nThêm Tags (Tùy chọn): Bạn có thể thêm các thẻ để dễ quản lý. Nhấp vào Next: Review policy.\nXem lại và Tạo Policy:\nĐối với Policy name, nhập fcj-ecr-ci-cd-policy. (Tùy chọn) Nhập Description. nhập policy for CI-CD. Nhấp vào nút Create policy. Việc tạo một chính sách tùy chỉnh như thế này cho phép bạn kiểm soát chính xác hơn các quyền mà người dùng hoặc vai trò có. Đây là một thực hành tốt hơn so với việc gán các chính sách quản lý (managed policies) có phạm vi rộng hơn cho mục đích CI/CD.\nTạo IAM User và Gán Policy cho CI/CD Bây giờ chúng ta sẽ tạo một IAM User và gán chính sách tùy chỉnh fcj-ecr-ci-cd-policy vừa tạo cho user này.\nChuyển đến dịch vụ IAM: Đảm bảo bạn đang ở bảng điều khiển IAM.\nTạo User mới:\nTrong bảng điều khiển IAM, chọn Users ở thanh điều hướng bên trái. Nhấp vào nút Create user. Hình 3.11: Bảng điều khiển IAM và nút Create user\nĐối với User name, nhập fcj-ecr-ci-cd-user. Chọn Provide user access to the AWS Management Console cho user CI/CD. Nhấp vào Next. Gán quyền (Permissions):\nTrên trang Set permissions, chọn Attach policies directly. Trong ô tìm kiếm, gõ fcj-ecr-ci-cd-policy (tên chính sách bạn vừa tạo) và chọn chính sách này. Nhấp vào Next. Xem lại và Tạo User:\nTrên trang Review and create, xem lại các thiết lập. Nhấp vào nút Create user. Lưu Access Key:\nSau khi user được tạo, bạn sẽ thấy thông báo thành công. Nhấp vào View user hoặc quay lại danh sách user và nhấp vào user fcj-ecr-ci-cd-user vừa tạo. Chuyển đến tab Security credentials. Trong phần Access keys, nhấp vào Create access key. Chọn Third-party service làm trường hợp sử dụng. Đánh dấu vào ô xác nhận và nhấp Next. (Tùy chọn) Nhập mô tả cho Access Key (ví dụ: for-github-actions).\nNhấp vào Done. Secret Access Key chỉ hiển thị MỘT LẦN duy nhất ngay sau khi tạo. Hãy chắc chắn rằng bạn đã sao chép cả Access Key ID và Secret Access Key và lưu trữ chúng ở một nơi an toàn. Bạn sẽ không thể xem lại Secret Access Key này sau khi đóng cửa sổ này. Chúng ta sẽ cần sử dụng chúng để cấu hình GitHub Actions trong các phần sau.\nTrong môi trường sản xuất thực tế, việc sử dụng IAM Role với OpenID Connect (OIDC) là phương pháp được khuyến nghị hơn để cấp quyền cho CI/CD. Phương pháp này giúp tránh việc phải lưu trữ Access Key dài hạn, tăng cường bảo mật. Tuy nhiên, để đơn giản hóa cho workshop này, chúng ta sẽ sử dụng Access Key.\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/4-ci-cd-with-github-actions/4.2-build-github-actions/",
	"title": "GitHub Actions Workflow",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ xem xét và phân tích kiến trúc của một file GitHub Actions Workflow được sử dụng để tự động hóa quá trình build Docker image và đẩy lên Amazon ECR khi có thay đổi trên nhánh main.\nMục tiêu của phần này Hiểu cấu trúc cơ bản của một GitHub Actions Workflow. Nắm được các bước để xác thực với AWS, đăng nhập ECR, build và push image. Cách workflow sử dụng các GitHub Secrets đã cấu hình để bảo mật thông tin xác thực. File Workflow chính: main.yml File main.yml nằm trong thư mục .github/workflows/ của repository. Đây là nơi định nghĩa toàn bộ luồng CI/CD của bạn.\nNội dung file .github/workflows/main.yml:\nname: CI/CD Pipeline on: push: branches: [\u0026#34;main\u0026#34;] permissions: contents: write jobs: build-and-push: name: build and push to ECR runs-on: ubuntu-latest steps: - name: checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: configure aws credentials uses: aws-actions/configure-aws-credentials@v1 with: aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} aws-region: ${{ secrets.AWS_REGION }} - name: login to amazon ECR id: login-ecr uses: aws-actions/amazon-ecr-login@v1 - name: Automatic Tagging of Releases id: increment-git-tag run: | bash ./build/git_update.sh -v patch - name: build, tag, and push the image to ECR id: build-image env: ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }} IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }} run: | docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG Giải thích Workflow on: push: Workflow sẽ chạy mỗi khi có code được đẩy lên nhánh main. permissions: contents: write: Cần quyền này để workflow có thể tạo tag và push tag lên repository. configure aws credentials: Sử dụng action aws-actions/configure-aws-credentials@v1 để cấu hình thông tin xác thực AWS từ các GitHub Secrets. login to amazon ECR: Sử dụng action aws-actions/amazon-ecr-login@v1 để đăng nhập Docker vào ECR. Automatic Tagging of Releases: Chạy script git_update.sh để tự động tăng phiên bản tag (patch) và tạo tag Git mới. build, tag, and push the image to ECR: Xây dựng Docker image, gắn tag với phiên bản mới và đẩy image lên ECR. Script: git_update.sh File workflow trên gọi một script shell có tên git_update.sh nằm trong thư mục build/ của repository. Script này chịu trách nhiệm tự động tăng phiên bản (versioning) của ứng dụng bằng cách tạo các Git tag mới (ví dụ: v1.0.0, v1.0.1, v1.0.2).\nVERSION=\u0026quot;\u0026quot;\rwhile getopts v: flag\rdo\rcase \u0026quot;${flag}\u0026quot; in\rv) VERSION=${OPTARG};;\resac\rdone\rgit fetch --tags --prune --unshallow 2\u0026gt;/dev/null\rCURRENT_VERSION=$(git describe --abbrev=0 --tags 2\u0026gt;/dev/null)\rif [[ \u0026quot;$CURRENT_VERSION\u0026quot; == \u0026quot;\u0026quot; ]]; then\rCURRENT_VERSION=\u0026quot;v0.0.0\u0026quot;\rfi\recho \u0026quot;Current Version: $CURRENT_VERSION\u0026quot;\rNUM_PART=${CURRENT_VERSION#v}\rCURRENT_VERSION_PARTS=(${NUM_PART//./ })\rVNUM1=${CURRENT_VERSION_PARTS[0]}\rVNUM2=${CURRENT_VERSION_PARTS[1]}\rVNUM3=${CURRENT_VERSION_PARTS[2]}\rif [[ $VERSION == 'major' ]]; then\rVNUM1=$((VNUM1+1))\rVNUM2=0\rVNUM3=0\relif [[ $VERSION == 'minor' ]]; then\rVNUM2=$((VNUM2+1))\rVNUM3=0\relif [[ $VERSION == 'patch' ]]; then\rVNUM3=$((VNUM3+1))\relse\recho \u0026quot;Invalid version type. Use: -v [major|minor|patch]\u0026quot;\rexit 1\rfi\rNEW_TAG=\u0026quot;v$VNUM1.$VNUM2.$VNUM3\u0026quot;\recho \u0026quot;($VERSION) updating $CURRENT_VERSION to $NEW_TAG\u0026quot;\rGIT_COMMIT=$(git rev-parse HEAD)\rNEEDS_TAG=$(git describe --contains $GIT_COMMIT 2\u0026gt;/dev/null)\rif [ -z \u0026quot;$NEEDS_TAG\u0026quot; ]; then\recho \u0026quot;Tagged with $NEW_TAG\u0026quot;\rgit tag $NEW_TAG\rgit push origin $NEW_TAG\relse\recho \u0026quot;Already a tag on this commit\u0026quot;\rfi\recho \u0026quot;git-tag=$NEW_TAG\u0026quot; \u0026gt;\u0026gt; $GITHUB_OUTPUT\rexit 0\rGiải thích Script Lấy phiên bản tag hiện tại từ Git: Sử dụng lệnh git describe để kiểm tra tag gần nhất trong repository. Tăng phiên bản major, minor hoặc patch: Dựa trên tham số truyền vào từ workflow (ví dụ: -v patch, -v minor, hoặc -v major). Tạo Git tag mới: Gắn tag mới (ví dụ: v1.2.3) và đẩy tag đó lên GitHub bằng lệnh git push origin. Xuất giá trị tag ra output: Cho phép các bước trong GitHub Actions sử dụng tag này (ví dụ: dùng cho IMAGE_TAG khi build Docker image). "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/5-ecr-security-lifecycle/5.2-inspector-vulnerability-scan/",
	"title": "Vulnerability Scanning với Inspector",
	"tags": [],
	"description": "",
	"content": "Bảo mật là một khía cạnh cực kỳ quan trọng đối với các ứng dụng container. Ngay cả khi bạn đã xây dựng image từ Dockerfile của mình, nó vẫn có thể chứa các thư viện hoặc gói phần mềm có lỗ hổng bảo mật đã biết. Amazon ECR tích hợp chặt chẽ với Amazon Inspector để cung cấp khả năng quét lỗ hổng tự động cho các Docker image của bạn. Điều này giúp bạn phát hiện sớm các rủi ro bảo mật và giảm thiểu bề mặt tấn công.\nMục tiêu của phần này Hiểu tầm quan trọng của việc quét lỗ hổng bảo mật cho Docker image. Kích hoạt dịch vụ Amazon Inspector cho tài khoản AWS của bạn. Cấu hình tính năng quét lỗ hổng nâng cao (Enhanced scanning) được hỗ trợ bởi Amazon Inspector trong ECR. Xem và phân tích các kết quả quét lỗ hổng để hiểu rõ hơn về các rủi ro tiềm ẩn. Tổng quan về Quét lỗ hổng trong ECR Amazon ECR cung cấp hai loại quét lỗ hổng:\nBasic scanning (Quét cơ bản): Sử dụng cơ sở dữ liệu Common Vulnerabilities and Exposures (CVE) của Clair để quét các gói hệ điều hành. Đây là tùy chọn quét mặc định và ít toàn diện hơn. Enhanced scanning (Quét nâng cao): Được cung cấp bởi Amazon Inspector, đây là tùy chọn quét được khuyến nghị. Inspector cung cấp khả năng quét toàn diện hơn, bao gồm các lỗ hổng cấp độ hệ điều hành và gói phần mềm ứng dụng, cũng như thông tin về mức độ dễ bị khai thác và các biện pháp khắc phục. Quét nâng cao có thể được cấu hình để quét liên tục các image khi chúng được đẩy lên và quét lại định kỳ khi có thông tin lỗ hổng mới. Trong workshop này, chúng ta sẽ kích hoạt Enhanced scanning với Amazon Inspector để có được cái nhìn toàn diện nhất về bảo mật image của chúng ta.\nKích hoạt Quét lỗ hổng bằng Amazon Inspector Để ECR có thể sử dụng Amazon Inspector cho việc quét nâng cao, bạn cần đảm bảo dịch vụ Amazon Inspector đã được kích hoạt trong tài khoản AWS của mình.\nTrong thanh tìm kiếm, gõ \u0026ldquo;Inspector\u0026rdquo; và chọn Amazon Inspector. Nếu đây là lần đầu tiên bạn truy cập Inspector hoặc dịch vụ chưa được kích hoạt, bạn sẽ thấy một trang chào mừng. Nhấp vào nút Activate Inspector (hoặc tương tự) để kích hoạt dịch vụ. Amazon Inspector là một dịch vụ trả phí. Việc kích hoạt nó sẽ phát sinh chi phí nhỏ dựa trên số lượng image được quét và dữ liệu được phân tích. Đảm bảo bạn tắt nó sau khi hoàn thành workshop nếu không còn nhu cầu sử dụng.\nTruy cập dịch vụ ECR:\nSau khi đã kích hoạt Inspector, quay lại thanh tìm kiếm, gõ \u0026ldquo;ECR\u0026rdquo; và chọn Elastic Container Registry. Cấu hình Enhanced Scanning cho tài khoản trong ECR:\nTrong bảng điều khiển ECR, nhấp vào Scan settings ở thanh điều hướng bên trái Features \u0026amp; Settings chọn Scanning. Tại đây, bạn sẽ thấy tùy chọn để cấu hình loại quét mặc định cho các repository mới. Chọn Enhanced scanning. Nhấp Save để lưu cấu hình này. Xác nhận cấu hình quét image cho Repository:\nQuay lại Repositories. Nhấp vào repository fcj-workshop-app của bạn. chọn vào image của bạn và và nhấn vào Details Với Enhanced scanning được bật, các image mới đẩy lên repository sẽ tự động được quét. Các image đã tồn tại có thể cần một thời gian để quét lần đầu hoặc bạn cần đẩy một phiên bản mới để kích hoạt quét.\nXem và Phân tích Kết quả Quét Sau khi quá trình quét hoàn tất (thường mất vài phút), bạn có thể xem kết quả ngay trong ECR console.\nTrong bảng điều khiển ECR, nhấp vào Repositories.\nNhấp vào repository fcj-workshop-app của bạn.\nNhấp vào tag của image mà bạn muốn kiểm tra chi tiết và chọn vào image của bạn và vnhấn vào Details.\nTrong trang chi tiết của image, nhấp vào tab See extended details in Inspector. Bạn sẽ thấy danh sách đầy đủ các lỗ hổng được tìm thấy, được phân loại theo mức độ nghiêm trọng. Mỗi lỗ hổng sẽ hiển thị các thông tin như: Severity (Mức độ nghiêm trọng): Critical, High, Medium, Low, Informational. CVE ID: Mã định danh của lỗ hổng (ví dụ: CVE-2023-XXXX). Package: Gói phần mềm bị ảnh hưởng. Fixed in version: Phiên bản mà lỗ hổng đã được khắc phục (nếu có). Description: Mô tả ngắn gọn về lỗ hổng. Nhấp vào từng CVE ID để xem thông tin chi tiết hơn, bao gồm mô tả đầy đủ, điểm CVSS, và các liên kết đến nguồn thông tin bên ngoài để hiểu rõ hơn về tác động và cách khắc phục. Các phát hiện về lỗ hổng của ECR images cũng được tổng hợp và hiển thị trong bảng điều khiển của Amazon Inspector. Bạn có thể truy cập dịch vụ Inspector và vào phần \u0026ldquo;Findings\u0026rdquo; (Phát hiện) để xem một cái nhìn tổng thể về tất cả các lỗ hổng được phát hiện trên các tài nguyên khác nhau của bạn (bao gồm cả image ECR).\nViệc quét lỗ hổng giúp bạn nhận diện các rủi ro bảo mật trong image. Mặc dù không phải tất cả các lỗ hổng \u0026ldquo;Informational\u0026rdquo; hoặc \u0026ldquo;Low\u0026rdquo; đều cần được ưu tiên ngay lập tức, các lỗ hổng Critical và High yêu cầu sự chú ý ngay lập tức. Bạn nên cập nhật các gói phần mềm bị ảnh hưởng lên phiên bản đã được khắc phục để giảm thiểu rủi ro.\nViệc kích hoạt và theo dõi quét lỗ hổng là một bước quan trọng trong việc duy trì chuỗi cung ứng phần mềm an toàn cho các ứng dụng container của bạn.\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/2-prerequisites/",
	"title": "Yêu cầu ",
	"tags": [],
	"description": "",
	"content": "Để bắt đầu workshop này, bạn cần chuẩn bị môi trường làm việc với các tài khoản, công cụ và tài nguyên cần thiết. Việc này sẽ đảm bảo bạn có thể thực hiện các bài lab một cách suôn sẻ và hiệu quả.\nCác bước chuẩn bị Chuẩn bị Tài khoản và Quyền truy cập AWS:\nĐảm bảo bạn có một tài khoản AWS đang hoạt động. Truy cập AWS Console với một người dùng IAM có quyền quản trị (hoặc một tập hợp các quyền tương đương để tạo và quản lý các tài nguyên của workshop). Cài đặt Công cụ cục bộ:\nDocker Desktop: Cài đặt Docker Desktop trên máy tính cá nhân của bạn. Đây là công cụ cần thiết để xây dựng (build) các Docker image. AWS Command Line Interface (AWS CLI): Cài đặt và cấu hình AWS CLI. Công cụ này cho phép bạn tương tác với các dịch vụ AWS từ dòng lệnh và là cần thiết cho một số bước xác thực trong workshop. Tạo Amazon ECR Repository:\nTạo một Amazon ECR Repository mới trong AWS Console với tên fcj-workshop-app. Repository này sẽ là nơi lưu trữ các container image của bạn trong suốt workshop. Chuẩn bị Repository GitHub:\nClone repository mẫu của workshop từ GitHub vào tài khoản GitHub cá nhân của bạn. Repository này chứa mã nguồn ứng dụng mẫu và Dockerfile cần thiết cho phần CI/CD. "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/3-iam-configuration/",
	"title": "Cấu hình IAM",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ thiết lập các quyền truy cập cần thiết bằng cách cấu hình AWS Identity and Access Management (IAM). Đây là bước nền tảng để đảm bảo người dùng và các dịch vụ AWS có thể tương tác an toàn với Amazon ECR và các tài nguyên liên quan, tuân thủ nguyên tắc \u0026ldquo;ít đặc quyền nhất\u0026rdquo;.\nMục tiêu của phần này Hiểu rõ vai trò của IAM trong việc kiểm soát quyền truy cập vào ECR. Thiết lập các IAM User, IAM Policy và IAM Role cần thiết cho các hoạt động của workshop. Đảm bảo các quy trình tự động (như GitHub Actions) có thể xác thực và tương tác với AWS một cách an toàn. "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/5-ecr-security-lifecycle/5.3-lifecycle-policy/",
	"title": "Quản lý vòng đời Image ECR",
	"tags": [],
	"description": "",
	"content": "Bảo mật và quản lý chi phí là hai yếu tố quan trọng khi làm việc với các Docker image trong Amazon ECR. Theo mặc định, ECR sẽ giữ tất cả các phiên bản image của bạn vô thời hạn, điều này có thể dẫn đến việc tích lũy các image cũ không cần thiết, làm tăng chi phí lưu trữ và khiến repository trở nên lộn xộn.\nChính sách vòng đời (Lifecycle Policies) của ECR cho phép bạn tự động quản lý các image này. Bạn có thể định cấu hình các quy tắc để xóa các image dựa trên tuổi tác, trạng thái thẻ (tagged/untagged), hoặc số lượng image. Điều này giúp bạn duy trì các repository ECR sạch sẽ, chỉ giữ lại những image cần thiết và tối ưu hóa chi phí.\nMục tiêu của phần này Hiểu tầm quan trọng của việc quản lý vòng đời cho Docker image. Tạo và cấu hình chính sách vòng đời ECR để tự động dọn dẹp các image cũ. Hiểu cách các quy tắc vòng đời hoạt động và tác động đến các image của bạn. Tổng quan về Chính sách Vòng đời trong ECR Chính sách vòng đời bao gồm một hoặc nhiều quy tắc. Mỗi quy tắc xác định một hành động (thường là xóa) dựa trên các tiêu chí cụ thể. Các tiêu chí phổ biến bao gồm:\nAge (Tuổi): Xóa các image cũ hơn một số ngày nhất định. Count (Số lượng): Giữ lại N image gần nhất và xóa các image cũ hơn. Tag Status (Trạng thái thẻ): Xóa các image chưa được gắn thẻ (untagged) hoặc các image có thẻ cụ thể. Các quy tắc được thực thi theo thứ tự ưu tiên (Rule Priority) mà bạn định nghĩa.\nCấu hình Chính sách Vòng đời trong ECR Bây giờ chúng ta sẽ tạo một chính sách vòng đời cho repository fcj-workshop-app của mình.\nĐảm bảo bạn đang ở bảng điều khiển ECR:\nTrong thanh tìm kiếm của AWS Console, gõ \u0026ldquo;ECR\u0026rdquo; và chọn Elastic Container Registry. Chọn Repository fcj-workshop-app:\nTrong danh sách các repository, nhấp vào tên repository fcj-workshop-app của bạn. Chuyển đến tab \u0026ldquo;Lifecycle policy\u0026rdquo;:\nTrong trang chi tiết của repository fcj-workshop-app, nhấp vào tab Lifecycle policy. Nhấp vào nút \u0026ldquo;Create rule\u0026rdquo;:\nTại tab \u0026ldquo;Lifecycle policy\u0026rdquo;, bạn sẽ thấy nút Create rule. Nhấp vào đó để bắt đầu định nghĩa các rule cho chính sách. Trước khi áp dụng policy thực tế, nên tạo rule và chạy thử (test rule) để xem trước ảnh nào sẽ bị xóa. Điều này giúp bạn tránh mất dữ liệu ngoài ý muốn.\nCấu hình Quy tắc đầu tiên: Xóa các Image chưa được gắn thẻ (Untagged Images):\nThêm một quy tắc mới với các cài đặt sau: Rule priority: 1 (Ưu tiên cao nhất) Rule description: Delete untagged images (Mô tả quy tắc) Image status: Untagged (Trạng thái hình ảnh: chưa được gắn thẻ) Action: Expire images (Hành động: xóa hình ảnh) Since image pushed: 1 Cấu hình Quy tắc 2: Giữ lại 3 Image gần nhất được gắn thẻ và xóa các Image cũ hơn:\nNhấp \u0026ldquo;Create rule\u0026rdquo; một lần nữa và cấu hình quy tắc thứ hai với các cài đặt sau: Rule priority: 2 Rule description: Keep latest 3 tagged images, delete others Image status: Tagged (Trạng thái hình ảnh: đã được gắn thẻ) Specify tags for wildcard matching: Nhập * (Đây là ký tự đại diện BẮT BUỘC để quy tắc áp dụng cho TẤT CẢ các image có gắn thẻ khi sử dụng tiêu chí \u0026ldquo;Image count greater than\u0026rdquo;. ECR yêu cầu bạn phải nhập ít nhất một mẫu thẻ.) Match criteria: Image count greater than Value: 3 Action: Expire images Sau khi đã định nghĩa xong tất cả các quy tắc, bạn sẽ chạy thử chính sách để xem trước tác động, rồi mới tạo chính thức.\nĐẩy thêm Image lên Repository để kiểm tra chính sách:\nĐể có đủ dữ liệu cho chính sách vòng đời hoạt động và để bạn có thể thấy kết quả mô phỏng rõ ràng, hãy lặp lại các bước đẩy image lên ECR repository (như đã thực hiện trong mục 4.3. Chạy và test thử Pipeline. Bạn nên đẩy thêm khoảng 5 image mới với các tag khác nhau (ví dụ: v0.0.2, v0.0.3, v0.0.4, v0.0.5, v0.0.6). Đảm bảo mỗi lần đẩy là một phiên bản mới để tạo ra các image riêng biệt. Chạy thử chính sách (Simulate policy) để xem trước tác động:\nSau khi đã định nghĩa tất cả các quy tắc cho chính sách, bạn nên chạy thử để xem những image nào sẽ bị ảnh hưởng (xóa) trước khi áp dụng thực tế. Trên giao diện tạo chính sách.\nKết quả mô phỏng sẽ hiển thị danh sách các image sẽ bị xóa nếu chính sách này được thực thi. Điều này giúp bạn tránh việc vô tình xóa các image quan trọng.\nHãy vô lại repository ECR của bạn và Chọn Lifecycle Policy\nChọn Actions\nChọn copy policy to test rules Chọn rule mà bạn muốn xem run test:\nChọn run test Kiểm tra run test chạy:\nViệc triển khai chính sách vòng đời giúp tự động hóa quá trình dọn dẹp, đảm bảo rằng repository ECR của bạn luôn được tối ưu và chỉ chứa các image cần thiết.\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/4-ci-cd-with-github-actions/4.3-run-pipeline/",
	"title": "Chạy và test thử Pipeline",
	"tags": [],
	"description": "",
	"content": "Sau khi đã cấu hình GitHub Repository Secrets và hiểu rõ về GitHub Actions Workflow, bây giờ chúng ta sẽ kích hoạt pipeline CI/CD để kiểm tra xem mọi thứ có hoạt động đúng như mong đợi hay không.\nMục tiêu của phần này Kích hoạt pipeline CI/CD bằng cách đẩy thay đổi lên GitHub. Theo dõi quá trình chạy workflow trên giao diện GitHub Actions. Xác minh kết quả: kiểm tra Git tag mới được tạo và Docker image trên Amazon ECR. Kích hoạt Pipeline CI/CD Pipeline CI/CD của bạn được cấu hình để tự động chạy mỗi khi có code được đẩy lên nhánh main. Để kích hoạt pipeline, chúng ta sẽ thực hiện một thay đổi nhỏ và đẩy lên repository.\nTạo một thay đổi nhỏ:\nMở thư mục dự án aws-container-security-workshop trên máy tính cục bộ của bạn. Mở file fcj\\src\\static\\js\\app.js (hoặc bất kỳ file nào khác, ví dụ: thêm một dòng comment vào file mã nguồn). Thêm một dòng chữ bất kỳ vào vào thư mục src\\static\\js\\app.js dòng 56 là v1.0.0 Lưu lại file. Đẩy thay đổi lên GitHub:\nMở Terminal/Command Prompt (đảm bảo bạn đang ở trong thư mục dự án). Thêm các thay đổi vào staging area: git add . Tạo một commit với thông điệp rõ ràng: git commit -m \u0026#34;Trigger CI/CD pipeline for testing\u0026#34; Đẩy commit này lên nhánh main của repository GitHub của bạn: git push origin main Ngay sau khi bạn đẩy code lên nhánh main, GitHub Actions sẽ tự động phát hiện thay đổi và bắt đầu chạy workflow CI/CD Pipeline mà bạn đã cấu hình.\nTheo dõi quá trình chạy Pipeline Bây giờ, hãy truy cập GitHub và theo dõi quá trình chạy của pipeline.\nCác bước thực hiện:\nTruy cập GitHub Actions:\nMở trình duyệt và điều hướng đến repository của bạn trên GitHub. Nhấp vào tab Actions. Xem trạng thái Workflow:\nBạn sẽ thấy một workflow có tên CI/CD Pipeline với trạng thái In progress (đang chạy) hoặc Queued (đang chờ). Nhấp vào tên của workflow vừa chạy (dựa trên thông điệp commit bạn vừa tạo) để xem chi tiết. Kiểm tra các bước của Job:\nTrong trang chi tiết workflow, bạn sẽ thấy job build-and-push. Nhấp vào đó để xem các bước cụ thể đang được thực hiện. Theo dõi log đầu ra của từng bước để đảm bảo chúng hoàn thành thành công. Bạn sẽ thấy các bước như checkout, configure aws credentials, login to amazon ECR, Automatic Tagging of Releases, và build, tag, and push the image to ECR lần lượt chạy. Đảm bảo rằng tất cả các bước đều có dấu tích xanh (thành công). Nếu có bất kỳ bước nào thất bại, hãy xem lại log để xác định nguyên nhân lỗi. Xác minh kết quả Pipeline Sau khi workflow hoàn thành thành công, chúng ta cần xác minh rằng các kết quả mong đợi đã được tạo ra.\nKiểm tra Git Tag mới trên GitHub:\nQuay lại trang chính của repository trên GitHub. Nhấp vào \u0026ldquo;Tags\u0026rdquo; hoặc \u0026ldquo;Releases\u0026rdquo; (thường nằm ở thanh bên phải hoặc dưới phần \u0026ldquo;Code\u0026rdquo;). Bạn sẽ thấy một Git tag mới đã được tạo với phiên bản tăng lên (ví dụ: v0.0.1 nếu đây là lần chạy đầu tiên hoặc phiên bản tiếp theo sau v0.0.0). Tag này được tạo tự động bởi script git_update.sh. Kiểm tra Docker Image trên Amazon ECR:\nĐăng nhập vào AWS Management Console. Điều hướng đến dịch vụ ECR (Elastic Container Registry). Trong bảng điều khiển ECR, tìm và nhấp vào repository của bạn có tên fcj-workshop-app. Bạn sẽ thấy một Docker image mới đã được push lên, với tag (phiên bản) tương ứng với Git tag bạn vừa thấy trên GitHub (ví dụ: v0.0.1). Nếu bạn thấy Git tag mới trên GitHub và Docker image mới trên ECR với cùng một phiên bản, điều đó có nghĩa là pipeline CI/CD của bạn đã được thiết lập và hoạt động thành công!\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/4-ci-cd-with-github-actions/",
	"title": "CI/CD với Github Actions",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ thiết lập một quy trình Tích hợp liên tục/Phân phối liên tục (CI/CD) sử dụng GitHub Actions. Quy trình này sẽ tự động hóa việc xây dựng (build) Docker image từ mã nguồn của bạn và đẩy (push) chúng lên Amazon ECR mỗi khi có thay đổi được đẩy lên GitHub.\nMục tiêu của phần này Hiểu cách GitHub Actions hoạt động như một công cụ CI/CD. Cấu hình GitHub Repository Secrets để lưu trữ thông tin xác thực AWS. Xây dựng GitHub Actions Workflow để tự động hóa quá trình build và push image lên ECR. Xác minh luồng CI/CD hoạt động đúng cách. "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/5-ecr-security-lifecycle/",
	"title": "ECR Security &amp; Lifecycle",
	"tags": [],
	"description": "",
	"content": "Sau khi đã thành công trong việc xây dựng và đẩy các Docker image lên Amazon ECR thông qua pipeline CI/CD, bước tiếp theo là đảm bảo rằng các image này được quản lý an toàn và hiệu quả trong suốt vòng đời của chúng. Amazon ECR cung cấp các tính năng mạnh mẽ để quét lỗ hổng bảo mật và tự động quản lý các phiên bản image, giúp bạn duy trì một kho lưu trữ container sạch sẽ và an toàn.\nMục tiêu của phần này Cấu hình tính năng Image Scanning (quét hình ảnh) trong ECR để tự động phát hiện các lỗ hổng bảo mật. Hiểu cách xem và phân tích các kết quả quét lỗ hổng để đưa ra hành động khắc phục. Cấu hình ECR Lifecycle Policy (chính sách vòng đời) để tự động xóa các phiên bản image cũ hoặc không sử dụng, giúp tối ưu chi phí và dung lượng lưu trữ. Nắm được lợi ích của việc áp dụng các chính sách quản lý vòng đời image trong môi trường sản xuất. "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/6-monitoring-alerts/",
	"title": "CloudTrail và CloudWatch",
	"tags": [],
	"description": "",
	"content": "Để có cái nhìn toàn diện về các hoạt động diễn ra trong Amazon ECR và đảm bảo tuân thủ các chính sách bảo mật, việc tận dụng AWS CloudTrail và Amazon CloudWatch là rất cần thiết. Hai dịch vụ này làm việc cùng nhau để cung cấp khả năng giám sát mạnh mẽ, giúp bạn theo dõi ai đã làm gì, khi nào và ở đâu trong môi trường registry của mình.\nTrong phần này, bạn sẽ học cách:\nTheo dõi các cuộc gọi API liên quan đến ECR bằng CloudTrail: CloudTrail tự động ghi lại mọi hoạt động API được thực hiện trên tài khoản AWS của bạn, bao gồm cả các tương tác với ECR như tạo/xóa repository, đẩy/kéo image, hoặc thay đổi chính sách. Điều này cung cấp một bản ghi lịch sử chi tiết, rất quan trọng cho việc kiểm toán bảo mật và khắc phục sự cố. Phân tích nhật ký CloudTrail trong CloudWatch Logs: Các bản ghi từ CloudTrail được gửi trực tiếp đến Amazon CloudWatch Logs. Tại đây, bạn có thể tìm kiếm, lọc và phân tích các nhật ký này để phát hiện các hoạt động đáng ngờ, theo dõi các thay đổi cấu hình hoặc xác minh việc tuân thủ các chính sách truy cập. Giám sát các chỉ số hiệu suất của ECR với CloudWatch Metrics: CloudWatch cũng tự động thu thập các chỉ số quan trọng về hoạt động và sức khỏe của các tài nguyên ECR của bạn, như dung lượng lưu trữ repository, số lượng image, và lưu lượng push/pull. Việc giám sát các chỉ số này giúp bạn hiểu rõ mức độ sử dụng, hiệu suất và khả năng mở rộng của ECR. Việc tích hợp CloudTrail và CloudWatch sẽ cung cấp cho bạn cái nhìn sâu sắc về mọi khía cạnh hoạt động của ECR, từ việc quản lý truy cập đến việc đảm bảo tính tuân thủ của các chính sách bảo mật mà bạn đã thiết lập.\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/7-clean-up-resources/",
	"title": "Clean-up Resources",
	"tags": [],
	"description": "",
	"content": "Để tránh phát sinh chi phí và giữ môi trường AWS của bạn gọn gàng, hãy làm theo các bước dưới đây để xóa bỏ tất cả các tài nguyên đã được tạo hoặc cấu hình trong workshop này.\nLưu ý: Đảm bảo bạn đang ở đúng Vùng AWS (Region) nơi bạn đã tạo các tài nguyên.\n1. Xóa ECR Repositories Truy cập dịch vụ ECR. Xóa các ECR Repository mà bạn đã tạo (ví dụ: my-test-repo, my-brand-new-test-repo-09-07-2340). 2. Xóa CloudWatch Dashboards Truy cập dịch vụ CloudWatch. Xóa CloudWatch Dashboard mà bạn đã tạo (ví dụ: ECR-Operations-Dashboard). 3. Xóa CloudTrail Trail Truy cập dịch vụ CloudTrail. Xóa CloudTrail Trail mà bạn đã tạo hoặc cấu hình (ví dụ: ecr-monitor-trail). 4. Xóa S3 Bucket của CloudTrail Truy cập dịch vụ S3. Làm rỗng S3 Bucket mà CloudTrail của bạn đã sử dụng để lưu nhật ký. Xóa S3 Bucket đó. 5. Xóa CloudWatch Log Group Truy cập dịch vụ CloudWatch. Xóa CloudWatch Log Group mà CloudTrail của bạn đã gửi nhật ký tới (ví dụ: /aws/cloudtrail/ecr-logs hoặc aws-cloudtrail-logs-fg). 6. Xóa IAM Role (Tùy chọn) Truy cập dịch vụ IAM. Xóa vai trò IAM mà CloudTrail đã sử dụng để gửi nhật ký đến CloudWatch Logs (thường có tên bắt đầu bằng CloudTrail_CloudWatchLogs_Role). "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
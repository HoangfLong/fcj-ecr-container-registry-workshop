[
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/",
	"title": "Container Registry Management with ECR and Security Policies",
	"tags": [],
	"description": "",
	"content": "Container Registry Management with ECR and Security Policies Overview In this workshop, you will implement a comprehensive container registry management system using Amazon Elastic Container Registry (ECR). The content focuses on designing a secure, efficient, and professional container management workflow, fully integrated with:\nSecurity policies (IAM) Vulnerability scanning (Amazon Inspector) Granular access control Lifecycle automation and CI/CD deployment Monitoring and alerting (CloudWatch \u0026amp; SNS) Compliance validation and cost optimization You will learn to design the system following a DevSecOps approach, where container images are scanned before deployment, access is tightly controlled, and old resources are automatically cleaned up to reduce cost.\nBy the end of this workshop, you will be able to: Apply security policies using IAM, demonstrating how ECR interacts with services like CodeBuild, ECS, and Lambda Integrate Amazon Inspector to automatically scan container images for vulnerabilities upon image push Implement granular access controls, ensuring users and services only have the permissions they need Configure ECR lifecycle policies to automatically clean up unused or untagged images and optimize storage cost Design an automated CI/CD pipeline that triggers security scans when new images are pushed Set up monitoring and alerts to notify you of potential security threats or suspicious activities Build a production-ready DevSecOps pipeline for managing containers securely and efficiently on AWS Workshop Content Introduction Prerequisites IAM Configuration CI/CD with GitHub Actions ECR Security \u0026amp; Lifecycle Management Monitoring \u0026amp; Alerts Clean-up Resources Letâ€™s begin building a secure, optimized, and automated container registry on AWS!\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/6-monitoring-alerts/6.1-cloudtrail-cloudwatch/",
	"title": "CloudTrail and CloudWatch",
	"tags": [],
	"description": "",
	"content": "For a comprehensive overview of activities within Amazon ECR and to ensure adherence to security policies, leveraging AWS CloudTrail and Amazon CloudWatch is essential. These two services work together to provide robust monitoring capabilities, helping you track who did what, when, and where within your registry environment.\nIn this section, you\u0026rsquo;ll learn how to:\nEnsure CloudTrail records ECR activity and sends logs to CloudWatch Logs. Monitor ECR-related API calls. Analyze logs and monitor ECR performance metrics. Setting up CloudTrail to monitor ECR Log in and access CloudTrail:\nLog in to the AWS Management Console. In the search bar, type CloudTrail and select the CloudTrail service from the results. Check Trail status and decide action:\nIn the CloudTrail dashboard, select \u0026ldquo;Trails\u0026rdquo; from the left menu. Check if you already have an active Trail that is sending logs to CloudWatch Logs. If you need to create a new Trail or configure an existing one: Proceed to Step 3. If the Trail is already correctly configured: You can skip the Trail configuration steps and go directly to Step 9. Create or edit a Trail to send logs to CloudWatch Logs:\nIf creating a new Trail: Click on \u0026ldquo;Create trail\u0026rdquo;. If editing an existing Trail: Click on the Trail\u0026rsquo;s name, then find the \u0026ldquo;CloudWatch Logs\u0026rdquo; section and click \u0026ldquo;Edit\u0026rdquo;. Configure Trail details (if creating new):\nTrail name: Give your Trail a name (e.g., ecr-monitor-trail). Storage location: Choose \u0026ldquo;Create new S3 bucket\u0026rdquo; and give it a name (or use an existing bucket). CloudWatch Logs: Select \u0026ldquo;Enabled\u0026rdquo;. Choose \u0026ldquo;New\u0026rdquo; to create a new Log group (e.g., /aws/cloudtrail/ecr-logs) or select an existing Log group. (Keep other options as default or skip them). Configure Trail details (continued):\nClick \u0026ldquo;Next\u0026rdquo;. In the \u0026ldquo;Choose log events\u0026rdquo; section, ensure \u0026ldquo;Management events\u0026rdquo; is selected. Complete Trail creation:\nClick \u0026ldquo;Next\u0026rdquo;. Click \u0026ldquo;Create trail\u0026rdquo; (if creating new) or \u0026ldquo;Save changes\u0026rdquo; (if editing). Viewing and analyzing ECR logs Access CloudTrail Event History:\nIn the CloudTrail dashboard, select \u0026ldquo;Event history\u0026rdquo; from the left menu. Filter events by ECR:\nClick on the filter \u0026ldquo;Attribute\u0026rdquo;, select \u0026ldquo;Event source\u0026rdquo;. In the field next to it, type ecr.amazonaws.com and press Enter. Access Log groups in CloudWatch:\nIn the AWS Console search bar, type CloudWatch and select the CloudWatch service. In the CloudWatch dashboard, select \u0026ldquo;Log groups\u0026rdquo; under \u0026ldquo;Logs\u0026rdquo;. Find the CloudTrail Log group:\nIn the Log group list, find the Log group that CloudTrail is sending logs to (configured in Step 4). Click on the name of that Log group to view the log streams. Monitoring metrics and creating Dashboards Monitor ECR metrics in CloudWatch Metrics:\nIn the CloudWatch dashboard, select \u0026ldquo;Metrics\u0026rdquo; from the left menu. In the \u0026ldquo;All metrics\u0026rdquo; section, select the namespace \u0026ldquo;ECR\u0026rdquo; or \u0026ldquo;AWS/ECR\u0026rdquo;. Choose the ECR metrics you want to view (e.g., RepositorySize, ImageCount). Create a custom Dashboard for ECR (Optional):\nIn the CloudWatch dashboard, select \u0026ldquo;Dashboards\u0026rdquo;. Click \u0026ldquo;Create dashboard\u0026rdquo;, name it (ex: ECR-Operations-Dashboard), and click \u0026ldquo;Create dashboard\u0026rdquo;. Add widgets.\nSelect the metric to add.\nSelect ECR.\nChoose your ECR repository.\nSelect create widget.\nBy setting up AWS CloudTrail to record ECR events and send them to Amazon CloudWatch Logs, you\u0026rsquo;ve created a robust monitoring system. Now, you can easily track API activities in ECR, analyze detailed logs using CloudWatch Logs Insights, and visualize key ECR performance metrics through custom CloudWatch Dashboards. This allows you to not only understand who did what and when in your image repositories, but also proactively monitor ECR\u0026rsquo;s status and performance, thereby enhancing both security and operational efficiency.\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/3-iam-configuration/3.1-set-up-iam/",
	"title": "Configure IAM Roles and Policies",
	"tags": [],
	"description": "",
	"content": "To ensure our CI/CD pipeline can securely interact with Amazon ECR, we need to configure the appropriate access permissions in AWS IAM. This step involves creating an ECR Repository if one doesn\u0026rsquo;t already exist, then creating an IAM User and assigning the necessary policies.\nObjectives of this section Create the fcj-workshop-app ECR Repository if it doesn\u0026rsquo;t already exist. Retrieve the ECR Repository URI. Create an IAM User with ECR access. Attach the necessary IAM policies to the IAM User. Create and Retrieve ECR Repository URI We need an ECR Repository to store our container images. If you haven\u0026rsquo;t created it in the \u0026ldquo;Preparation\u0026rdquo; section, follow these steps. Afterward, we will retrieve this repository\u0026rsquo;s URI.\nLog in to the AWS Console: Go to https://aws.amazon.com/console/ and sign in.\nNavigate to the ECR service: In the search bar, type \u0026ldquo;ECR\u0026rdquo; and select Elastic Container Registry.\nCheck and Create Repository:\nIn the ECR dashboard, select Repositories in the left navigation pane. If you DO NOT have a repository named fcj-workshop-app yet, follow these steps to create one: Click the Create repository button. For Visibility settings, choose Private. In the Repository name field, enter fcj-workshop-app. Click the Create repository button at the bottom of the page. If you ALREADY HAVE the fcj-workshop-app repository from the preparation section, proceed to the next step. Select your Repository and Copy the URI:\nFrom the list of repositories, find and click on the fcj-workshop-app repository name. On the repository details page, you will see the repository URI. Copy this URI. It will be similar to: 123456789012.dkr.ecr.ap-southeast-1.amazonaws.com/fcj-workshop-app (where 123456789012 is your AWS account ID and ap-southeast-1 is your Region). Keep this URI handy. We will need to use it in later GitHub Actions configuration steps to specify the repository where the image will be pushed.\rCreate IAM Policy for ECR Access Instead of using a pre-existing policy, we will create a custom IAM Policy via the console to gain more granular control over the permissions the CI/CD user will have on ECR.\nNavigate to the IAM service: In the AWS Console search bar, type \u0026ldquo;IAM\u0026rdquo; and select IAM.\nCreate a new Policy:\nIn the IAM dashboard, select Policies in the left navigation pane. Click the Create policy button. Choose service and actions:\nOn the Specify permissions page, select the Visual editor tab. For Service, search for and select Elastic Container Registry. In the Actions allowed section, expand Write and select the following actions: CompleteLayerUpload InitiateLayerUpload PutImage UploadLayerPart Expand Read and select the following actions: BatchCheckLayerAvailability BatchGetImage DescribeImages GetDownloadUrlForLayer In the additional Access level section, find and select the GetAuthorizationToken action. In the Resources section, choose Specific. For repository, click Add ARN. Enter the following information: Region: Select your AWS Region (e.g., ap-southeast-1). Account ID: Enter your AWS account ID. Repository name: Enter fcj-workshop-app. Click Add ARN. For the GetAuthorizationToken resource (if this option is separate), leave it as Any or add a separate line for this action with Resource: * if necessary. (Typically, GetAuthorizationToken is not restricted to a specific repository resource but rather by account/region). The selected permissions (`ecr:*` for specific actions) allow the user to perform image push and pull operations.\r`ecr:GetAuthorizationToken`: Allows the user to obtain an authentication token to log Docker into ECR.\r`Resource`: We specify that this policy applies only to your `fcj-workshop-app` repository, adhering to the principle of least privilege.\rAdd Tags (Optional): You can add tags for easier management. Click Next: Review policy.\nReview and Create Policy:\nFor Policy name, enter fcj-ecr-ci-cd-policy. (Optional) Enter a Description. Enter policy for CI-CD. Click the Create policy button. Creating a custom policy like this allows you more precise control over the permissions granted to a user or role. This is a better practice than assigning broader managed policies for CI/CD purposes.\rCreate IAM User and Attach Policy for CI/CD Now we will create an IAM User and attach the custom policy fcj-ecr-ci-cd-policy we just created to this user.\nNavigate to the IAM service: Ensure you are in the IAM dashboard.\nCreate a new User:\nIn the IAM dashboard, select Users in the left navigation pane. Click the Create user button. For User name, enter fcj-ecr-ci-cd-user. Choose Provide user access to the AWS Management Console for the CI/CD user. Click Next. Set permissions:\nOn the Set permissions page, select Attach policies directly. In the search box, type fcj-ecr-ci-cd-policy (the name of the policy you just created) and select this policy. Click Next. Review and Create User:\nOn the Review and create page, review the settings. Click the Create user button. Save Access Key:\nAfter the user is created, you will see a success message. Click View user or go back to the user list and click on the fcj-ecr-ci-cd-user you just created. Navigate to the Security credentials tab. In the Access keys section, click Create access key. Choose Third-party service as the use case. Check the confirmation box and click Next. (Optional) Enter a description for the Access Key (e.g., for-github-actions).\nClick Done. The Secret Access Key is displayed ONLY ONCE immediately after creation. Make sure you copy both the Access Key ID and Secret Access Key and store them in a secure place. You will not be able to view this Secret Access Key again after closing this window. We will need to use them to configure GitHub Actions in later sections.\nIn a real production environment, using an IAM Role with OpenID Connect (OIDC) is the more recommended method for granting permissions to CI/CD. This approach avoids the need to store long-lived Access Keys, enhancing security. However, for simplicity in this workshop, we will use Access Keys.\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "In this workshop, we will build a comprehensive solution to manage the lifecycle and security of your container images by leveraging the power of Amazon Elastic Container Registry (ECR) along with related AWS services. You will be guided through a DevSecOps process, from initial setup to automation, security, and monitoring.\nArchitecture Overview The architecture above illustrates the main workflow in this workshop:\nContinuous Integration/Continuous Delivery (CI/CD):\nDevelopers begin by requesting access through IAM (Identity and Access Management). Code changes are managed in GitHub. When a new tag is created or code is pushed, GitHub Actions will be triggered. GitHub Actions serves as our primary CI/CD tool. It will perform the steps: \u0026ldquo;Build Code to Image\u0026rdquo; (building a Docker image from the source code) and then \u0026ldquo;Push to ECR\u0026rdquo; (pushing the built image to Amazon Elastic Container Registry). Once successfully pushed, the image will be \u0026ldquo;Image Ready for Deployment\u0026rdquo; (ready for deployment). Registry Management and Security in AWS Cloud:\nAmazon ECR is the central repository for your container images. Here, ECR Repository Policies will manage detailed access rules, and ECR Lifecycle Policy will automatically manage the lifecycle of images, helping to clean up old or unnecessary versions. When a new image is pushed to ECR, this action will \u0026ldquo;image push triggers scan/report findings\u0026rdquo; by Amazon Inspector. Amazon Inspector will automatically scan the image to detect known security vulnerabilities. Monitoring:\nAWS CloudTrail automatically records \u0026ldquo;API Calls Logs\u0026rdquo; from ECR and other AWS services. These logs are sent to Amazon CloudWatch for storage and \u0026ldquo;metrics/logs\u0026rdquo; analysis. CloudWatch also plays a role in overall monitoring and can trigger alarms based on metrics. Amazon Inspector identifies security vulnerabilities in container images you store in Amazon ECR. Resource Cleanup: Finally, the workshop will also guide you on how to clean up all created AWS resources to avoid unwanted costs.\nThis workshop will provide you with practical knowledge and essential skills to build a modern, secure, and cost-effective container image management workflow in the AWS environment.\nKey AWS Services Used In this workshop, we will interact with and configure several important AWS services to build a comprehensive container image management system. Below is a basic introduction to each service:\nAmazon Elastic Container Registry (ECR) Amazon ECR is a fully managed, secure, scalable, and reliable Docker container registry service. ECR allows developers to easily store, manage, share, and deploy their Docker images. It integrates tightly with Amazon Elastic Container Service (ECS), Amazon Elastic Kubernetes Service (EKS), and AWS Lambda, as well as AWS and third-party CI/CD tools.\nWith Amazon ECR, you don\u0026rsquo;t need to operate your own container registry infrastructure or worry about its scaling, security, and availability. ECR provides:\nHigh Security: Images are encrypted at rest and in transit. IAM integration for fine-grained access control. Scalability: Automatically scales to meet your image storage needs. High Performance: Fast image retrieval for your container deployments. AWS Identity and Access Management (IAM) AWS Identity and Access Management (IAM) is a web service that helps you securely control access to your AWS resources. With IAM, you can manage who is authenticated (signed in) and authorized (has permissions) to use resources. In this workshop, IAM serves as the foundation for security by:\nManaging Users: Creating and managing AWS users for console or CLI access. Managing Roles: Allowing AWS services or third parties (like GitHub Actions) to assume a role with temporary permissions to perform tasks. Managing Policies: Defining specific permissions (allow or deny) that users or roles can perform on your AWS resources, ensuring the principle of \u0026ldquo;least privilege.\u0026rdquo; GitHub Actions GitHub Actions is a continuous integration (CI) and continuous delivery (CD) platform built directly into GitHub. It allows you to automate your software development workflows directly from your GitHub repository. In this workshop, GitHub Actions is used to:\nAutomate Build: Automatically build Docker images upon code changes. Automate Push: Push the built Docker images to ECR. Integrate: Securely connect with AWS via IAM Roles and OpenID Connect to perform actions on ECR. Amazon Inspector Amazon Inspector is an automated vulnerability management service that helps you discover and continuously scan AWS workloads for vulnerabilities. When integrated with ECR, Amazon Inspector can:\nAutomated Image Scanning: Automatically scan new container images as they are pushed to ECR. Vulnerability Detection: Identify known security vulnerabilities (CVE - Common Vulnerabilities and Exposures) in the operating system, application packages, and dependencies of the images. Detailed Reporting: Provide detailed information on vulnerabilities found, their severity, and remediation guidance. AWS CloudTrail AWS CloudTrail is a service that enables you to monitor and record user activity and API calls across your AWS services. It provides a history of events in your AWS account. CloudTrail is crucial for:\nSecurity Auditing: Providing a detailed audit trail of all interactions with ECR and other services, helping to track who did what, when, and where. Compliance Analysis: Supporting compliance requirements by providing evidence of account activity. Troubleshooting: Helping diagnose and troubleshoot issues by reviewing the sequence of events that occurred. Amazon CloudWatch Amazon CloudWatch is a monitoring and management service that allows you to collect and access metrics, logs, and events from your AWS applications, resources, and services. In the workshop, CloudWatch is used to:\nCollect Metrics: Automatically collect performance and operational metrics from ECR (e.g., repository size, image push/pull counts). Monitor Logs: Store and analyze logs from other services (e.g., API logs from CloudTrail). Create Alarms: Set up alarms based on metric thresholds or patterns in logs to proactively notify about potential issues. "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/4-ci-cd-with-github-actions/4.1-prepare-github-repo/",
	"title": "Prepare GitHub Repository",
	"tags": [],
	"description": "",
	"content": "To set up the CI/CD pipeline with GitHub Actions, we first need to prepare the repository containing the sample application source code and configure secure environment variables (secrets) in GitHub.\nObjectives of this section Clone the application source code repository to your local machine. Create a new GitHub Repository in your personal account. Push the cloned source code to the newly created GitHub Repository. Configure GitHub Repository Secrets to store AWS credentials and the ECR URI. Clone Repository to Local Machine You need to clone the repository containing the sample application source code to your local machine so you can modify and push code to your own repository.\nOpen Terminal / Command Prompt: Open a command line window on your computer.\nClone the original Repository: Download the source code from the sample repository to your machine.\ngit clone https://github.com/HoangfLong/aws-container-security-workshop.git Create a New Repository on Personal GitHub and Push Source Code After cloning the source code, you need to create a new repository on your GitHub account and push this source code to it. This will be the repository that your GitHub Actions will monitor.\nCreate a New Repository on GitHub:\nLog in to your GitHub account. Click the + sign in the top-right corner, then select New repository. Name your repository (e.g., aws-container-security-workshop-my-repo), choose Public or Private as desired, and DO NOT check \u0026ldquo;Add a README file\u0026rdquo; or other initialization options. Finally, click Create repository. Link and Push Source Code to the New Repository:\nReturn to your Terminal/Command Prompt (ensure you are in the cloned project directory). Remove the old remote link (if any): git remote remove origin Add a link to your new repository on GitHub: git remote add origin [https://github.com/YOUR_GITHUB_USERNAME/YOUR_NEW_REPOSITORY_NAME.git](https://github.com/YOUR_GITHUB_USERNAME/YOUR_NEW_REPOSITORY_NAME.git) (Replace YOUR_GITHUB_USERNAME and YOUR_NEW_REPOSITORY_NAME with your information). Rename the default branch to main (if needed): git branch -M main Push the source code to your new repository: git push -u origin main (You may be asked to log in using your GitHub username and Personal Access Token). Configure GitHub Repository Secrets For GitHub Actions to securely interact with your AWS account and Amazon ECR, we need to store sensitive information (like the IAM User\u0026rsquo;s Access Key, Secret Key, AWS Region, and ECR URI) as GitHub Repository Secrets. This ensures these details are not exposed in your source code or workflow logs.\nAccess Repository Settings: From your pushed-code repository page on GitHub, click on the Settings tab.\nSelect Secrets and Variables: In the left navigation pane, scroll down and select Secrets and variables, then choose Actions.\nAdd Required Secrets: Click the New repository secret button to add each secret one by one:\nAWS_ACCESS_KEY_ID: Paste the Access Key ID value created in AWS (from Section 3.1).\nAWS_REGION: Paste your AWS Region value (e.g., ap-southeast-1 or us-east-1). (Choose the Region where you created the IAM User and ECR Repository).\nAWS_SECRET_ACCESS_KEY: Paste the Secret Access Key value created in AWS (from Section 3.1).\nECR_REPOSITORY_URI: Paste the URI of your fcj-workshop-app ECR Repository (from Section 3.1).\nAfter adding, you will see these four secrets in the list. They will be used securely by GitHub Actions without being exposed.\r"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/5-ecr-security-lifecycle/5.1-repository-policy/",
	"title": "Repository Access Policy",
	"tags": [],
	"description": "",
	"content": "In this section, we will delve into Repository Access Policies in AWS ECR, a powerful feature that allows you to finely control which users or services can interact with the Docker images in your repository. Unlike Identity-based IAM policies, a Repository Policy is a Resource-based policy directly attached to a specific ECR repository.\nThis enables you to define access permissions (e.g., who can pull or push images) directly at the repository level, adding an additional layer of security and more granular access control.\nObjectives of this section Understand the role and importance of ECR Repository Policy. Clearly differentiate between IAM Identity-based policies and ECR Repository policies. Configure a Repository Policy to restrict or grant access. Apply the policy to enhance the security of your Docker images. Repository Policy Concept and Distinction from IAM Policies To better understand Repository Policies, it\u0026rsquo;s crucial to differentiate them from IAM Identity-based policies:\nIAM Identity-based Policies:\nAttached to an IAM Principal (IAM user, group, or role). Determine what actions that Principal is allowed to perform on which resources. Example: An IAM policy might allow a specific user to perform the ecr:PutImage action on all ECR repositories in the account. ECR Repository Policies (Resource-based Policies):\nAttached directly to a specific resource (in this case, an ECR repository). Determine which Principals are allowed to perform what actions on that specific resource itself. Example: A Repository policy might allow an IAM role from another AWS account to access this particular repository. Permission Evaluation Principle (\u0026ldquo;AND\u0026rdquo; Logic):\nFor a Principal to perform an action on an ECR repository, the action must be permitted by both policies:\nThe Principal\u0026rsquo;s IAM (Identity-based) policy must allow the action. The ECR Repository\u0026rsquo;s (Resource-based) policy must allow the action for that Principal. If either policy explicitly denies (Effect: Deny) the action, then the action will be denied, regardless of whether the other policy allows it.\nThis combination provides greater flexibility and detailed control, especially useful in cases such as:\nGranting cross-account access. Controlling access for a large number of Principals based on resource attributes. To learn more about the differences between policy types in AWS, you can refer to the official AWS documentation:\nPrivate repository policies in Amazon ECR - Repository policies vs IAM policies Identity-based policies and resource-based policies - AWS IAM User Guide Configuring Repository Policy We will configure a Repository Policy for the fcj-workshop-app repository to demonstrate how to control access. The example below will grant the fcj-ecr-ci-cd-user IAM user (which we created earlier) permissions to push and pull images from this repository.\nAccess the ECR service:\nIn the search bar, type \u0026ldquo;ECR\u0026rdquo; and select Elastic Container Registry. Select Repository:\nIn the ECR dashboard, click Repositories in the left navigation pane. Find and click on your repository named fcj-workshop-app. Edit Repository Policy:\nOn the fcj-workshop-app repository details page, click the Permissions tab. Click the Edit repository policy button. Paste the Adjusted JSON Policy:\nA JSON editor will appear. Clear any existing content and paste the following secure JSON policy into it: { \u0026#34;Version\u0026#34;: \u0026#34;2008-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowPushPullFromCICDUser\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::\u0026lt;YOUR_AWS_ACCOUNT_ID\u0026gt;:user/fcj-ecr-ci-cd-user\u0026#34; }, \u0026#34;Action\u0026#34;: [ \u0026#34;ecr:GetDownloadUrlForLayer\u0026#34;, \u0026#34;ecr:BatchGetImage\u0026#34;, \u0026#34;ecr:BatchCheckLayerAvailability\u0026#34;, \u0026#34;ecr:PutImage\u0026#34;, \u0026#34;ecr:InitiateLayerUpload\u0026#34;, \u0026#34;ecr:UploadLayerPart\u0026#34;, \u0026#34;ecr:CompleteLayerUpload\u0026#34; ] } ] } Replace \u0026lt;YOUR_AWS_ACCOUNT_ID\u0026gt; with your AWS Account ID. You can find your AWS Account ID by clicking on your account name in the upper right corner of the AWS Management Console.\nSave policy and result:\nRepository Policy Explanation Sid: \u0026quot;AllowPushPullFromCICDUser\u0026quot; Grants the IAM user fcj-ecr-ci-cd-user the necessary actions to pull and push Docker images: ecr:GetDownloadUrlForLayer: Retrieves the URL to download an image layer. ecr:BatchGetImage: Retrieves metadata and configuration for multiple images. ecr:BatchCheckLayerAvailability: Checks if image layers are available in the repository. ecr:PutImage: Pushes an image manifest to the repository. ecr:InitiateLayerUpload: Initiates the upload process for an image layer. ecr:UploadLayerPart: Uploads a part of an image layer. ecr:CompleteLayerUpload: Completes the image layer upload process. You have successfully configured the Repository Access Policy for your ECR repository securely. This policy will enhance security by providing tighter control over access to your Docker images.\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/4-ci-cd-with-github-actions/4.2-build-github-actions/",
	"title": "GitHub Actions Workflow",
	"tags": [],
	"description": "",
	"content": "In this section, we will examine and analyze the architecture of a GitHub Actions Workflow file used to automate the process of building Docker images and pushing them to Amazon ECR when changes are made to the main branch.\nObjectives of this section Understand the basic structure of a GitHub Actions Workflow. Grasp the steps for authenticating with AWS, logging into ECR, building, and pushing images. Learn how the workflow leverages configured GitHub Secrets for secure credential handling. The Main Workflow File: main.yml The main.yml file is located in the .github/workflows/ directory of the repository. This is where your entire CI/CD flow is defined.\nContent of the .github/workflows/main.yml file:\nname: CI/CD Pipeline on: push: branches: [\u0026#34;main\u0026#34;] permissions: contents: write jobs: build-and-push: name: build and push to ECR runs-on: ubuntu-latest steps: - name: checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: configure aws credentials uses: aws-actions/configure-aws-credentials@v1 with: aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} aws-region: ${{ secrets.AWS_REGION }} - name: login to amazon ECR id: login-ecr uses: aws-actions/amazon-ecr-login@v1 - name: Automatic Tagging of Releases id: increment-git-tag run: | bash ./build/git_update.sh -v patch - name: build, tag, and push the image to ECR id: build-image env: ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_URI }} IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }} run: | docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG Workflow Explanation on: push: The workflow will execute every time code is pushed to the main branch. permissions: contents: write: This permission is required for the workflow to create and push tags to the repository. configure aws credentials: Uses the aws-actions/configure-aws-credentials@v1 action to configure AWS credentials from GitHub Secrets. login to amazon ECR: Uses the aws-actions/amazon-ecr-login@v1 action to log Docker into ECR. Automatic Tagging of Releases: Runs the git_update.sh script to automatically increment the patch version and create a new Git tag. build, tag, and push the image to ECR: Builds the Docker image, tags it with the new version, and pushes the image to ECR. Script: git_update.sh The workflow file above calls a shell script named git_update.sh located in the build/ directory of the repository. This script is responsible for automatically versioning the application by creating new Git tags (e.g., v1.0.0, v1.0.1, v1.0.2).\nVERSION=\u0026quot;\u0026quot;\rwhile getopts v: flag\rdo\rcase \u0026quot;${flag}\u0026quot; in\rv) VERSION=${OPTARG};;\resac\rdone\rgit fetch --tags --prune --unshallow 2\u0026gt;/dev/null\rCURRENT_VERSION=$(git describe --abbrev=0 --tags 2\u0026gt;/dev/null)\rif [[ \u0026quot;$CURRENT_VERSION\u0026quot; == \u0026quot;\u0026quot; ]]; then\rCURRENT_VERSION=\u0026quot;v0.0.0\u0026quot;\rfi\recho \u0026quot;Current Version: $CURRENT_VERSION\u0026quot;\rNUM_PART=${CURRENT_VERSION#v}\rCURRENT_VERSION_PARTS=(${NUM_PART//./ })\rVNUM1=${CURRENT_VERSION_PARTS[0]}\rVNUM2=${CURRENT_VERSION_PARTS[1]}\rVNUM3=${CURRENT_VERSION_PARTS[2]}\rif [[ $VERSION == 'major' ]]; then\rVNUM1=$((VNUM1+1))\rVNUM2=0\rVNUM3=0\relif [[ $VERSION == 'minor' ]]; then\rVNUM2=$((VNUM2+1))\rVNUM3=0\relif [[ $VERSION == 'patch' ]]; then\rVNUM3=$((VNUM3+1))\relse\recho \u0026quot;Invalid version type. Use: -v [major|minor|patch]\u0026quot;\rexit 1\rfi\rNEW_TAG=\u0026quot;v$VNUM1.$VNUM2.$VNUM3\u0026quot;\recho \u0026quot;($VERSION) updating $CURRENT_VERSION to $NEW_TAG\u0026quot;\rGIT_COMMIT=$(git rev-parse HEAD)\rNEEDS_TAG=$(git describe --contains $GIT_COMMIT 2\u0026gt;/dev/null)\rif [ -z \u0026quot;$NEEDS_TAG\u0026quot; ]; then\recho \u0026quot;Tagged with $NEW_TAG\u0026quot;\rgit tag $NEW_TAG\rgit push origin $NEW_TAG\relse\recho \u0026quot;Already a tag on this commit\u0026quot;\rfi\recho \u0026quot;git-tag=$NEW_TAG\u0026quot; \u0026gt;\u0026gt; $GITHUB_OUTPUT\rexit 0\rScript Explanation Fetch current Git tag version: Uses the git describe command to check the most recent tag in the repository. Increment major, minor, or patch version: Based on the parameter passed from the workflow (e.g., -v patch, -v minor, or -v major). Create new Git tag: Attaches the new tag (e.g., v1.2.3) and pushes it to GitHub using the git push origin command. Export tag value to output: Allows subsequent steps in GitHub Actions to utilize this tag (e.g., for the IMAGE_TAG when building the Docker image). "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/2-prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": "To begin this workshop, you need to prepare your working environment with the necessary accounts, tools, and resources. This will ensure you can smoothly and effectively complete the labs.\nPreparation Steps Prepare AWS Account and Access Permissions:\nEnsure you have an active AWS account. Access the AWS Console with an IAM user possessing administrative permissions (or an equivalent set of permissions to create and manage workshop resources). Install Local Tools:\nDocker Desktop: Install Docker Desktop on your personal computer. This tool is essential for building Docker images. AWS Command Line Interface (AWS CLI): Install and configure the AWS CLI. This tool allows you to interact with AWS services from the command line and is necessary for some verification steps in the workshop. Create an Amazon ECR Repository:\nCreate a new Amazon ECR Repository in the AWS Console with the name fcj-workshop-app. This repository will be where your container images are stored throughout the workshop. Prepare GitHub Repository:\nClone the sample workshop repository from GitHub into your personal GitHub account. This repository contains the sample application source code and Dockerfile necessary for the CI/CD section. "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/5-ecr-security-lifecycle/5.2-inspector-vulnerability-scan/",
	"title": "Vulnerability Scanning with Inspector",
	"tags": [],
	"description": "",
	"content": "Security is an extremely critical aspect for containerized applications. Even if you have built an image from your Dockerfile, it can still contain libraries or software packages with known security vulnerabilities. Amazon ECR integrates tightly with Amazon Inspector to provide automatic vulnerability scanning for your Docker images. This helps you detect security risks early and minimize the attack surface.\nObjectives of this section Understand the importance of vulnerability scanning for Docker images. Activate the Amazon Inspector service for your AWS account. Configure the enhanced scanning feature, powered by Amazon Inspector, in ECR. View and analyze vulnerability scan results to better understand potential risks. Overview of Vulnerability Scanning in ECR Amazon ECR offers two types of vulnerability scanning:\nBasic scanning: Uses the Clair Common Vulnerabilities and Exposures (CVE) database to scan operating system packages. This is the default and less comprehensive scanning option. Enhanced scanning: Powered by Amazon Inspector, this is the recommended scanning option. Inspector provides more comprehensive scanning capabilities, including operating system and application package-level vulnerabilities, as well as information on exploitability and remediation steps. Enhanced scanning can be configured to continuously scan images as they are pushed and periodically re-scan when new vulnerability information becomes available. In this workshop, we will enable Enhanced scanning with Amazon Inspector to get the most comprehensive view of our image security.\nEnabling Vulnerability Scanning with Amazon Inspector For ECR to use Amazon Inspector for enhanced scanning, you need to ensure the Amazon Inspector service is activated in your AWS account.\nIn the search bar, type \u0026ldquo;Inspector\u0026rdquo; and select Amazon Inspector. If this is your first time accessing Inspector or the service is not yet activated, you will see a welcome page. Click the Activate Inspector (or similar) button to enable the service. Amazon Inspector is a paid service. Activating it will incur small costs based on the number of images scanned and data analyzed. Ensure you deactivate it after completing the workshop if you no longer need it.\nAccess the ECR service:\nAfter activating Inspector, return to the search bar, type \u0026ldquo;ECR\u0026rdquo;, and select Elastic Container Registry. Configure Enhanced Scanning for the account in ECR:\nIn the ECR dashboard, click Scan settings in the left navigation pane under Features \u0026amp; Settings, then select Scanning. Here, you will see the option to configure the default scan type for new repositories. Select Enhanced scanning. Click Save to save this configuration. Confirm image scan configuration for the Repository:\nGo back to Repositories. Click on your fcj-workshop-app repository. Select your image and click Details. With Enhanced scanning enabled, newly pushed images to the repository will be automatically scanned. Existing images might require some time for the initial scan, or you may need to push a new version to trigger a scan.\nViewing and Analyzing Scan Results Once the scanning process is complete (usually takes a few minutes), you can view the results directly in the ECR console.\nIn the ECR dashboard, click Repositories.\nClick on your fcj-workshop-app repository.\nClick on the tag of the image you want to inspect in detail, select your image, and then click Details.\nOn the image details page, click the See extended details in Inspector tab. You will see a full list of detected vulnerabilities, categorized by severity. Each vulnerability will display information such as: Severity: Critical, High, Medium, Low, Informational. CVE ID: The vulnerability identifier (e.g., CVE-2023-XXXX). Package: The affected software package. Fixed in version: The version in which the vulnerability has been fixed (if applicable). Description: A brief description of the vulnerability. Click on each CVE ID to view more detailed information, including a full description, CVSS score, and links to external resources for a deeper understanding of the impact and remediation. Vulnerability findings for ECR images are also aggregated and displayed in the Amazon Inspector dashboard. You can access the Inspector service and navigate to the \u0026ldquo;Findings\u0026rdquo; section to get an overview of all vulnerabilities detected across your various resources (including ECR images).\nVulnerability scanning helps you identify security risks in your images. While not all \u0026ldquo;Informational\u0026rdquo; or \u0026ldquo;Low\u0026rdquo; vulnerabilities require immediate prioritization, Critical and High vulnerabilities demand immediate attention. You should update affected software packages to fixed versions to mitigate risks.\nEnabling and monitoring vulnerability scanning is a crucial step in maintaining a secure software supply chain for your containerized applications.\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/5-ecr-security-lifecycle/5.3-lifecycle-policy/",
	"title": "ECR Image Lifecycle Management",
	"tags": [],
	"description": "",
	"content": "Security and cost management are two critical factors when working with Docker images in Amazon ECR. By default, ECR retains all your image versions indefinitely, which can lead to an accumulation of unnecessary old images, increasing storage costs and making the repository cluttered.\nECR Lifecycle Policies allow you to automatically manage these images. You can configure rules to delete images based on age, tag status (tagged/untagged), or image count. This helps you maintain clean ECR repositories, keeping only necessary images and optimizing costs.\nObjectives of this section Understand the importance of lifecycle management for Docker images. Create and configure ECR lifecycle policies to automatically clean up old images. Understand how lifecycle rules work and their impact on your images. Overview of Lifecycle Policies in ECR A lifecycle policy consists of one or more rules. Each rule defines an action (typically deletion) based on specific criteria. Common criteria include:\nAge: Delete images older than a certain number of days. Count: Retain the N most recent images and delete older ones. Tag Status: Delete untagged images or images with specific tags. Rules are enforced according to the Rule Priority you define.\nConfiguring Lifecycle Policies in ECR Now we will create a lifecycle policy for our fcj-workshop-app repository.\nEnsure you are in the ECR dashboard:\nIn the AWS Console search bar, type \u0026ldquo;ECR\u0026rdquo; and select Elastic Container Registry. Select the fcj-workshop-app Repository:\nFrom the list of repositories, click on the name of your fcj-workshop-app repository. Navigate to the \u0026ldquo;Lifecycle policy\u0026rdquo; tab:\nOn the fcj-workshop-app repository details page, click the Lifecycle policy tab. Click the \u0026ldquo;Create rule\u0026rdquo; button:\nOn the \u0026ldquo;Lifecycle policy\u0026rdquo; tab, you will see the Create rule button. Click it to start defining rules for the policy. Before applying the policy, it is recommended to create and test the rule (test rule) to preview which images will be deleted. This helps you avoid unintended data loss.\nConfigure the first rule: Delete Untagged Images:\nAdd a new rule with the following settings: Rule priority: 1 (Highest priority) Rule description: Delete untagged images Image status: Untagged Action: Expire images Since image pushed: 1 (day) Configure Rule 2: Keep the 3 most recent tagged images and delete older ones:\nClick \u0026ldquo;Create rule\u0026rdquo; again and configure the second rule with the following settings: Rule priority: 2 Rule description: Keep latest 3 tagged images, delete others Image status: Tagged Specify tags for wildcard matching: Enter * (This is a REQUIRED wildcard character for the rule to apply to ALL tagged images when using the \u0026ldquo;Image count greater than\u0026rdquo; criteria. ECR requires you to enter at least one tag pattern.) Match criteria: Image count greater than Value: 3 Action: Expire images Once all rules for the policy have been defined, you should simulate the policy to preview its impact before officially creating it.\nPush More Images to the Repository to Test the Policy:\nTo have enough data for the lifecycle policy to operate and for you to see clear simulation results, repeat the steps for pushing images to the ECR repository (as done in Section 4.3. Run and test Pipeline). You should push approximately 5 new images with different tags (e.g., v0.0.2, v0.0.3, v0.0.4, v0.0.5, v0.0.6). Ensure each push is a new version to create distinct images. Simulate policy to preview its impact:\nAfter defining all rules for the policy, you should run a simulation to see which images will be affected (deleted) before actual application. On the policy creation interface: The simulation results will show a list of images that would be deleted if this policy were executed. This helps you avoid accidentally deleting important images. Go back to your ECR repository and select Lifecycle Policy. Choose Actions. Select copy policy to test rules. Select the rule you want to test run:\nChoose run test. Check the test run:\nImplementing a lifecycle policy helps automate the cleanup process, ensuring that your ECR repository is always optimized and contains only the necessary images.\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/3-iam-configuration/",
	"title": "IAM Configuration",
	"tags": [],
	"description": "",
	"content": "In this section, we will set up the necessary access permissions by configuring AWS Identity and Access Management (IAM). This is a foundational step to ensure that users and AWS services can securely interact with Amazon ECR and related resources, adhering to the principle of \u0026ldquo;least privilege.\u0026rdquo;\nObjectives of this section Understand the role of IAM in controlling access to ECR. Set up the required IAM Users, IAM Policies, and IAM Roles for the workshop\u0026rsquo;s operations. Ensure automated processes (like GitHub Actions) can authenticate and interact with AWS securely. "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/4-ci-cd-with-github-actions/",
	"title": "CI/CD with GitHub Actions",
	"tags": [],
	"description": "",
	"content": "In this section, we will set up a Continuous Integration/Continuous Delivery (CI/CD) pipeline using GitHub Actions. This pipeline will automate the process of building Docker images from your source code and pushing them to Amazon ECR whenever changes are pushed to GitHub.\nObjectives of this section Understand how GitHub Actions functions as a CI/CD tool. Configure GitHub Repository Secrets to securely store AWS credentials. Build a GitHub Actions Workflow to automate the image build and push process to ECR. Verify the CI/CD pipeline functions correctly. "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/4-ci-cd-with-github-actions/4.3-run-pipeline/",
	"title": "Run and Test the Pipeline",
	"tags": [],
	"description": "",
	"content": "Now that you have configured GitHub Repository Secrets and understood the GitHub Actions Workflow, we will trigger the CI/CD pipeline to verify that everything is working as expected.\nObjectives of this section Trigger the CI/CD pipeline by pushing changes to GitHub. Monitor the workflow run on the GitHub Actions interface. Verify the results: check for the newly created Git tag and the Docker image on Amazon ECR. Triggering the CI/CD Pipeline Your CI/CD pipeline is configured to automatically run every time code is pushed to the main branch. To trigger the pipeline, we will make a small change and push it to the repository.\nMake a small change:\nOpen the aws-container-security-workshop project folder on your local machine. Open the file fcj\\src\\static\\js\\app.js (or any other file, e.g., add a comment to a source code file). Add the text v1.0.0 to line 56 in the src\\static\\js\\app.js file. Save the file. Push changes to GitHub:\nOpen Terminal/Command Prompt (ensure you are in the project directory). Add the changes to the staging area: git add . Create a commit with a clear message: git commit -m \u0026#34;Trigger CI/CD pipeline for testing\u0026#34; Push this commit to the main branch of your GitHub repository: git push origin main Immediately after you push code to the main branch, GitHub Actions will automatically detect the change and start running the CI/CD Pipeline workflow you configured.\nMonitoring the Pipeline Run Now, navigate to GitHub and monitor the pipeline\u0026rsquo;s progress.\nAccess GitHub Actions:\nOpen your browser and navigate to your repository on GitHub. Click on the Actions tab. View Workflow Status:\nYou will see a workflow named CI/CD Pipeline with an In progress or Queued status. Click on the name of the workflow that just ran (based on the commit message you just created) to view details. Check Job Steps:\nOn the workflow details page, you will see the build-and-push job. Click on it to see the specific steps being executed. Monitor the output logs of each step to ensure they complete successfully. You will see steps like checkout, configure aws credentials, login to amazon ECR, Automatic Tagging of Releases, and build, tag, and push the image to ECR running sequentially. Ensure that all steps have a green checkmark (success). If any step fails, review the logs to identify the cause of the error. Verifying Pipeline Results After the workflow successfully completes, we need to verify that the expected results have been generated.\nCheck New Git Tag on GitHub: Return to the main page of your repository on GitHub. Click on \u0026ldquo;Tags\u0026rdquo; or \u0026ldquo;Releases\u0026rdquo; (usually located in the right sidebar or under the \u0026ldquo;Code\u0026rdquo; section). You should see a new Git tag created with an incremented version (e.g., `v0.0.1 "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/5-ecr-security-lifecycle/",
	"title": "ECR Security &amp; Lifecycle",
	"tags": [],
	"description": "",
	"content": "After successfully building and pushing Docker images to Amazon ECR via the CI/CD pipeline, the next step is to ensure that these images are managed securely and efficiently throughout their lifecycle. Amazon ECR offers powerful features for vulnerability scanning and automated image version management, helping you maintain a clean and secure container registry.\nObjectives of this section Configure ECR Image Scanning to automatically detect security vulnerabilities. Understand how to view and analyze vulnerability scan results to take corrective actions. Configure ECR Lifecycle Policies to automatically delete old or unused image versions, optimizing costs and storage capacity. Grasp the benefits of applying image lifecycle management policies in a production environment. "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/6-monitoring-alerts/",
	"title": "Monitoring &amp; Alerts",
	"tags": [],
	"description": "",
	"content": "For a comprehensive overview of activities within Amazon ECR and to ensure adherence to security policies, leveraging AWS CloudTrail and Amazon CloudWatch is essential. These two services work in tandem to provide robust monitoring capabilities, helping you track who did what, when, and where within your registry environment.\nIn this section, you will learn how to:\nMonitor ECR-related API calls with CloudTrail: CloudTrail automatically records every API activity performed on your AWS account, including interactions with ECR such as creating/deleting repositories, pushing/pulling images, or modifying policies. This provides a detailed historical record, crucial for security auditing and troubleshooting. Analyze CloudTrail logs in CloudWatch Logs: Logs from CloudTrail are directly sent to Amazon CloudWatch Logs. Here, you can search, filter, and analyze these logs to detect suspicious activities, track configuration changes, or verify compliance with access policies. Monitor ECR performance metrics with CloudWatch Metrics: CloudWatch also automatically collects important metrics about the activity and health of your ECR resources, such as repository storage usage, number of images, and push/pull traffic. Monitoring these metrics helps you understand ECR usage levels, performance, and scalability. Integrating CloudTrail and CloudWatch will provide you with deep insights into all operational aspects of ECR, from managing access to ensuring compliance with the security policies you have established.\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/7-clean-up-resources/",
	"title": "Clean-up Resources",
	"tags": [],
	"description": "",
	"content": "To avoid incurring unnecessary costs and to keep your AWS environment tidy, follow the steps below to delete all resources created or configured during this workshop.\nNote: Make sure you\u0026rsquo;re in the correct AWS Region where the resources were created.\n1. Delete ECR Repositories Go to Amazon ECR. Delete the ECR repositories you created (e.g., my-test-repo, my-brand-new-test-repo-09-07-2340). 2. Delete CloudWatch Dashboards Go to Amazon CloudWatch. Delete the CloudWatch dashboard you created (e.g., ECR-Operations-Dashboard). 3. Delete CloudTrail Trail Go to AWS CloudTrail. Delete the Trail you created or configured (e.g., ecr-monitor-trail). 4. Delete CloudTrail S3 Bucket Go to Amazon S3. Empty the S3 bucket that CloudTrail used to store logs. Then delete the S3 bucket. 5. Delete CloudWatch Log Group Go to CloudWatch Logs. Delete the Log Group where CloudTrail sent logs (e.g., /aws/cloudtrail/ecr-logs or aws-cloudtrail-logs-fg). 6. Delete IAM Role (Optional) Go to AWS IAM. Delete the IAM Role that CloudTrail used to send logs to CloudWatch Logs (usually named starting with CloudTrail_CloudWatchLogs_Role). "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
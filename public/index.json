[
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/",
	"title": "Container Registry Management with ECR and Security Policies",
	"tags": [],
	"description": "",
	"content": "Container Registry Management with ECR and Security Policies Overview In this workshop, you will implement a comprehensive container registry management system using Amazon Elastic Container Registry (ECR). The content focuses on designing a secure, efficient, and professional container management workflow, fully integrated with:\nSecurity policies (IAM) Vulnerability scanning (Amazon Inspector) Granular access control Lifecycle automation and CI/CD deployment Monitoring and alerting (CloudWatch \u0026amp; SNS) Compliance validation and cost optimization You will learn to design the system following a DevSecOps approach, where container images are scanned before deployment, access is tightly controlled, and old resources are automatically cleaned up to reduce cost.\nBy the end of this workshop, you will be able to: Apply security policies using IAM, demonstrating how ECR interacts with services like CodeBuild, ECS, and Lambda Integrate Amazon Inspector to automatically scan container images for vulnerabilities upon image push Implement granular access controls, ensuring users and services only have the permissions they need Configure ECR lifecycle policies to automatically clean up unused or untagged images and optimize storage cost Design an automated CI/CD pipeline that triggers security scans when new images are pushed Set up monitoring and alerts to notify you of potential security threats or suspicious activities Build a production-ready DevSecOps pipeline for managing containers securely and efficiently on AWS Workshop Content Introduction Prerequisites IAM Configuration CI/CD with GitHub Actions ECR Security \u0026amp; Lifecycle Management Monitoring \u0026amp; Alerts Clean-up Resources Letâ€™s begin building a secure, optimized, and automated container registry on AWS!\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/6-monitoring-alerts/6.1-cloudtrail-cloudwatch/",
	"title": "CloudTrail and CloudWatch",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/3-iam-configuration/3.1-set-up-iam/",
	"title": "Configure IAM Roles and Policies",
	"tags": [],
	"description": "",
	"content": "To ensure our CI/CD pipeline can securely interact with Amazon ECR, we need to configure the appropriate access permissions in AWS IAM. This step involves creating an ECR Repository if one doesn\u0026rsquo;t already exist, then creating an IAM User and assigning the necessary policies.\nObjectives of this section Create the fcj-workshop-app ECR Repository if it doesn\u0026rsquo;t already exist. Retrieve the ECR Repository URI. Create an IAM User with ECR access. Attach the necessary IAM policies to the IAM User. Create and Retrieve ECR Repository URI We need an ECR Repository to store our container images. If you haven\u0026rsquo;t created it in the \u0026ldquo;Preparation\u0026rdquo; section, follow these steps. Afterward, we will retrieve this repository\u0026rsquo;s URI.\nLog in to the AWS Console: Go to https://aws.amazon.com/console/ and sign in.\nNavigate to the ECR service: In the search bar, type \u0026ldquo;ECR\u0026rdquo; and select Elastic Container Registry.\nCheck and Create Repository:\nIn the ECR dashboard, select Repositories in the left navigation pane. If you DO NOT have a repository named fcj-workshop-app yet, follow these steps to create one: Click the Create repository button. For Visibility settings, choose Private. In the Repository name field, enter fcj-workshop-app. Click the Create repository button at the bottom of the page. If you ALREADY HAVE the fcj-workshop-app repository from the preparation section, proceed to the next step. Select your Repository and Copy the URI:\nFrom the list of repositories, find and click on the fcj-workshop-app repository name. On the repository details page, you will see the repository URI. Copy this URI. It will be similar to: 123456789012.dkr.ecr.ap-southeast-1.amazonaws.com/fcj-workshop-app (where 123456789012 is your AWS account ID and ap-southeast-1 is your Region). Keep this URI handy. We will need to use it in later GitHub Actions configuration steps to specify the repository where the image will be pushed.\rCreate IAM Policy for ECR Access Instead of using a pre-existing policy, we will create a custom IAM Policy via the console to gain more granular control over the permissions the CI/CD user will have on ECR.\nNavigate to the IAM service: In the AWS Console search bar, type \u0026ldquo;IAM\u0026rdquo; and select IAM.\nCreate a new Policy:\nIn the IAM dashboard, select Policies in the left navigation pane. Click the Create policy button. Choose service and actions:\nOn the Specify permissions page, select the Visual editor tab. For Service, search for and select Elastic Container Registry. In the Actions allowed section, expand Write and select the following actions: CompleteLayerUpload InitiateLayerUpload PutImage UploadLayerPart Expand Read and select the following actions: BatchCheckLayerAvailability BatchGetImage DescribeImages GetDownloadUrlForLayer In the additional Access level section, find and select the GetAuthorizationToken action. In the Resources section, choose Specific. For repository, click Add ARN. Enter the following information: Region: Select your AWS Region (e.g., ap-southeast-1). Account ID: Enter your AWS account ID. Repository name: Enter fcj-workshop-app. Click Add ARN. For the GetAuthorizationToken resource (if this option is separate), leave it as Any or add a separate line for this action with Resource: * if necessary. (Typically, GetAuthorizationToken is not restricted to a specific repository resource but rather by account/region). The selected permissions (`ecr:*` for specific actions) allow the user to perform image push and pull operations.\r`ecr:GetAuthorizationToken`: Allows the user to obtain an authentication token to log Docker into ECR.\r`Resource`: We specify that this policy applies only to your `fcj-workshop-app` repository, adhering to the principle of least privilege.\rAdd Tags (Optional): You can add tags for easier management. Click Next: Review policy.\nReview and Create Policy:\nFor Policy name, enter fcj-ecr-ci-cd-policy. (Optional) Enter a Description. Enter policy for CI-CD. Click the Create policy button. Creating a custom policy like this allows you more precise control over the permissions granted to a user or role. This is a better practice than assigning broader managed policies for CI/CD purposes.\rCreate IAM User and Attach Policy for CI/CD Now we will create an IAM User and attach the custom policy fcj-ecr-ci-cd-policy we just created to this user.\nNavigate to the IAM service: Ensure you are in the IAM dashboard.\nCreate a new User:\nIn the IAM dashboard, select Users in the left navigation pane. Click the Create user button. For User name, enter fcj-ecr-ci-cd-user. Choose Provide user access to the AWS Management Console for the CI/CD user. Click Next. Set permissions:\nOn the Set permissions page, select Attach policies directly. In the search box, type fcj-ecr-ci-cd-policy (the name of the policy you just created) and select this policy. Click Next. Review and Create User:\nOn the Review and create page, review the settings. Click the Create user button. Save Access Key:\nAfter the user is created, you will see a success message. Click View user or go back to the user list and click on the fcj-ecr-ci-cd-user you just created. Navigate to the Security credentials tab. In the Access keys section, click Create access key. Choose Third-party service as the use case. Check the confirmation box and click Next. (Optional) Enter a description for the Access Key (e.g., for-github-actions).\nClick Done. The Secret Access Key is displayed ONLY ONCE immediately after creation. Make sure you copy both the Access Key ID and Secret Access Key and store them in a secure place. You will not be able to view this Secret Access Key again after closing this window. We will need to use them to configure GitHub Actions in later sections.\nIn a real production environment, using an IAM Role with OpenID Connect (OIDC) is the more recommended method for granting permissions to CI/CD. This approach avoids the need to store long-lived Access Keys, enhancing security. However, for simplicity in this workshop, we will use Access Keys.\n"
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "In this workshop, we will build a comprehensive solution to manage the lifecycle and security of your container images by leveraging the power of Amazon Elastic Container Registry (ECR) along with related AWS services. You will be guided through a DevSecOps process, from initial setup to automation, security, and monitoring.\nArchitecture Overview The architecture above illustrates the main workflow in this workshop:\nContinuous Integration/Continuous Delivery (CI/CD):\nDevelopers begin by requesting access through IAM (Identity and Access Management). Code changes are managed in GitHub. When a new tag is created or code is pushed, GitHub Actions will be triggered. GitHub Actions serves as our primary CI/CD tool. It will perform the steps: \u0026ldquo;Build Code to Image\u0026rdquo; (building a Docker image from the source code) and then \u0026ldquo;Push to ECR\u0026rdquo; (pushing the built image to Amazon Elastic Container Registry). Once successfully pushed, the image will be \u0026ldquo;Image Ready for Deployment\u0026rdquo; (ready for deployment). Registry Management and Security in AWS Cloud:\nAmazon ECR is the central repository for your container images. Here, ECR Repository Policies will manage detailed access rules, and ECR Lifecycle Policy will automatically manage the lifecycle of images, helping to clean up old or unnecessary versions. When a new image is pushed to ECR, this action will \u0026ldquo;image push triggers scan/report findings\u0026rdquo; by Amazon Inspector. Amazon Inspector will automatically scan the image to detect known security vulnerabilities. Monitoring:\nAWS CloudTrail automatically records \u0026ldquo;API Calls Logs\u0026rdquo; from ECR and other AWS services. These logs are sent to Amazon CloudWatch for storage and \u0026ldquo;metrics/logs\u0026rdquo; analysis. CloudWatch also plays a role in overall monitoring and can trigger alarms based on metrics. Amazon Inspector identifies security vulnerabilities in container images you store in Amazon ECR. Resource Cleanup: Finally, the workshop will also guide you on how to clean up all created AWS resources to avoid unwanted costs.\nThis workshop will provide you with practical knowledge and essential skills to build a modern, secure, and cost-effective container image management workflow in the AWS environment.\nKey AWS Services Used In this workshop, we will interact with and configure several important AWS services to build a comprehensive container image management system. Below is a basic introduction to each service:\nAmazon Elastic Container Registry (ECR) Amazon ECR is a fully managed, secure, scalable, and reliable Docker container registry service. ECR allows developers to easily store, manage, share, and deploy their Docker images. It integrates tightly with Amazon Elastic Container Service (ECS), Amazon Elastic Kubernetes Service (EKS), and AWS Lambda, as well as AWS and third-party CI/CD tools.\nWith Amazon ECR, you don\u0026rsquo;t need to operate your own container registry infrastructure or worry about its scaling, security, and availability. ECR provides:\nHigh Security: Images are encrypted at rest and in transit. IAM integration for fine-grained access control. Scalability: Automatically scales to meet your image storage needs. High Performance: Fast image retrieval for your container deployments. AWS Identity and Access Management (IAM) AWS Identity and Access Management (IAM) is a web service that helps you securely control access to your AWS resources. With IAM, you can manage who is authenticated (signed in) and authorized (has permissions) to use resources. In this workshop, IAM serves as the foundation for security by:\nManaging Users: Creating and managing AWS users for console or CLI access. Managing Roles: Allowing AWS services or third parties (like GitHub Actions) to assume a role with temporary permissions to perform tasks. Managing Policies: Defining specific permissions (allow or deny) that users or roles can perform on your AWS resources, ensuring the principle of \u0026ldquo;least privilege.\u0026rdquo; GitHub Actions GitHub Actions is a continuous integration (CI) and continuous delivery (CD) platform built directly into GitHub. It allows you to automate your software development workflows directly from your GitHub repository. In this workshop, GitHub Actions is used to:\nAutomate Build: Automatically build Docker images upon code changes. Automate Push: Push the built Docker images to ECR. Integrate: Securely connect with AWS via IAM Roles and OpenID Connect to perform actions on ECR. Amazon Inspector Amazon Inspector is an automated vulnerability management service that helps you discover and continuously scan AWS workloads for vulnerabilities. When integrated with ECR, Amazon Inspector can:\nAutomated Image Scanning: Automatically scan new container images as they are pushed to ECR. Vulnerability Detection: Identify known security vulnerabilities (CVE - Common Vulnerabilities and Exposures) in the operating system, application packages, and dependencies of the images. Detailed Reporting: Provide detailed information on vulnerabilities found, their severity, and remediation guidance. AWS CloudTrail AWS CloudTrail is a service that enables you to monitor and record user activity and API calls across your AWS services. It provides a history of events in your AWS account. CloudTrail is crucial for:\nSecurity Auditing: Providing a detailed audit trail of all interactions with ECR and other services, helping to track who did what, when, and where. Compliance Analysis: Supporting compliance requirements by providing evidence of account activity. Troubleshooting: Helping diagnose and troubleshoot issues by reviewing the sequence of events that occurred. Amazon CloudWatch Amazon CloudWatch is a monitoring and management service that allows you to collect and access metrics, logs, and events from your AWS applications, resources, and services. In the workshop, CloudWatch is used to:\nCollect Metrics: Automatically collect performance and operational metrics from ECR (e.g., repository size, image push/pull counts). Monitor Logs: Store and analyze logs from other services (e.g., API logs from CloudTrail). Create Alarms: Set up alarms based on metric thresholds or patterns in logs to proactively notify about potential issues. "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/4-ci-cd-with-github-actions/4.1-prepare-github-repo/",
	"title": "Prepare GitHub Repository",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/5-ecr-security-lifecycle/5.1-repository-policy/",
	"title": "Repository Access Policy",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/4-ci-cd-with-github-actions/4.2-build-github-actions/",
	"title": "GitHub Actions Workflow",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/2-prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": "To begin this workshop, you need to prepare your working environment with the necessary accounts, tools, and resources. This will ensure you can smoothly and effectively complete the labs.\nPreparation Steps Prepare AWS Account and Access Permissions:\nEnsure you have an active AWS account. Access the AWS Console with an IAM user possessing administrative permissions (or an equivalent set of permissions to create and manage workshop resources). Install Local Tools:\nDocker Desktop: Install Docker Desktop on your personal computer. This tool is essential for building Docker images. AWS Command Line Interface (AWS CLI): Install and configure the AWS CLI. This tool allows you to interact with AWS services from the command line and is necessary for some verification steps in the workshop. Create an Amazon ECR Repository:\nCreate a new Amazon ECR Repository in the AWS Console with the name fcj-workshop-app. This repository will be where your container images are stored throughout the workshop. Prepare GitHub Repository:\nClone the sample workshop repository from GitHub into your personal GitHub account. This repository contains the sample application source code and Dockerfile necessary for the CI/CD section. "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/5-ecr-security-lifecycle/5.2-inspector-vulnerability-scan/",
	"title": "Vulnerability Scanning with Inspector",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/3-iam-configuration/",
	"title": "IAM Configuration",
	"tags": [],
	"description": "",
	"content": "In this section, we will set up the necessary access permissions by configuring AWS Identity and Access Management (IAM). This is a foundational step to ensure that users and AWS services can securely interact with Amazon ECR and related resources, adhering to the principle of \u0026ldquo;least privilege.\u0026rdquo;\nObjectives of this section Understand the role of IAM in controlling access to ECR. Set up the required IAM Users, IAM Policies, and IAM Roles for the workshop\u0026rsquo;s operations. Ensure automated processes (like GitHub Actions) can authenticate and interact with AWS securely. "
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/5-ecr-security-lifecycle/5.3-lifecycle-policy/",
	"title": "Image Lifecycle Management",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/4-ci-cd-with-github-actions/",
	"title": "CI/CD with GitHub Actions",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/4-ci-cd-with-github-actions/4.3-run-pipeline/",
	"title": "Run and Test the Pipeline",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/5-ecr-security-lifecycle/",
	"title": "ECR Security &amp; Lifecycle",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/6-monitoring-alerts/",
	"title": "Monitoring &amp; Alerts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/7-clean-up-resources/",
	"title": "Clean-up Resources",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/fcj-ecr-container-registry-workshop/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]